{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Unofficial Source Coop Python SDK &amp; CLI","text":"<p> <p></p> <p></p> <p>An unofficial Python SDK and command-line interface for Source Coop, a platform for discovering, accessing, and sharing geospatial data.</p> <p>Project DISCLAIMER</p> <p>This project is not officially affiliated with, authorized by, endorsed by, or in any way connected to Source Coop or Radiant Earth. This is an independent project created by Samapriya Roy to simplify interaction with Source Coop's public APIs and services</p>"},{"location":"#what-is-source-coop","title":"What is Source Coop?","text":"<p>Source Coop is a platform for sharing and discovering geospatial datasets. It provides a centralized repository where organizations and individuals can publish, find, and access geospatial data in various formats.</p>"},{"location":"#why-this-tool-exists","title":"Why This Tool Exists","text":"<p>This Python SDK and CLI was developed to simplify programmatic interaction with Source Coop. While Source Coop provides a web interface for browsing and downloading data, many geospatial data workflows benefit from automation and integration into existing data pipelines.</p> <p>This tool enables you to:</p> <ul> <li>Script the discovery and downloading of datasets</li> <li>Incorporate Source Coop datasets into automated workflows</li> <li>Efficiently download large datasets with multipart and concurrent transfer support</li> <li>Explore and search repositories programmatically</li> </ul>"},{"location":"#features","title":"Features","text":"<p>This package serves both as a software development kit (SDK) for Python applications and as a command-line interface (CLI):</p> <ul> <li>Authentication: Log in to Source Coop and manage your session</li> <li>Repository Discovery: Browse, search, and export repository information</li> <li>Account Information: Retrieve profile details for users and organizations</li> <li>Content Exploration: List and summarize repository contents without downloading</li> <li>Efficient Downloads: Download repository data with concurrent and multipart support for large files</li> <li>Python Integration: Import the package in your Python applications for programmatic access</li> <li>Command-Line Interface: Use the CLI for quick operations without writing code</li> </ul>"},{"location":"#key-components","title":"Key Components","text":"<p>The tool is organized into several components:</p> <ul> <li>Client: The main entry point for Python SDK usage, integrating API and S3 functionality</li> <li>API Client: Handles REST API interactions for accounts, repositories, and metadata</li> <li>S3 Client: Manages interaction with Source Coop's S3-compatible storage</li> <li>Authentication: Handles login and session management</li> <li>CLI: Command-line interface for all functionality</li> </ul>"},{"location":"#who-should-use-this-tool","title":"Who Should Use This Tool","text":"<p>This tool is ideal for:</p> <ul> <li>GIS Analysts: Who need to download and process geospatial data</li> <li>Data Scientists: Working with geospatial datasets in automated pipelines</li> <li>Researchers: Accessing and analyzing geospatial data programmatically</li> <li>Developers: Building applications that incorporate Source Coop data</li> </ul>"},{"location":"#getting-started","title":"Getting Started","text":"<p>To start using the tool, check out the following guides:</p> <ul> <li>Installation: How to install the package</li> <li>Authentication: How to log in and verify your identity</li> <li>Repository Discovery: How to find and explore repositories</li> <li>Downloading Data: How to efficiently download repository content</li> </ul> <p>For a complete list of commands and their options, see the CLI Reference.</p>"},{"location":"cli-reference/","title":"CLI Reference","text":"<p>This page provides a comprehensive reference for all command-line interface (CLI) commands available in the Source Coop tool.</p>"},{"location":"cli-reference/#command-structure","title":"Command Structure","text":"<p>All commands follow this general structure:</p> <pre><code>source-coop COMMAND [OPTIONS]\n</code></pre>"},{"location":"cli-reference/#global-help","title":"Global Help","text":"<p>To see the full list of available commands:</p> <pre><code>source-coop --help\n</code></pre> <p>Example output:</p> <pre><code>usage: source-coop [-h] {login,whoami,repos,profile,members,summarize,download} ...\n\nSource Coop CLI\n\npositional arguments:\n  {login,whoami,repos,profile,members,summarize,download}\n                        Command to run\n    login               Log in to source.coop\n    whoami              Show current user info\n    repos               List repositories\n    profile             Get profile information\n    members             Get organization members\n    summarize           Summarize repository contents\n    download            Download repository contents\n\noptions:\n  -h, --help            show this help message and exit\n</code></pre>"},{"location":"cli-reference/#commands","title":"Commands","text":""},{"location":"cli-reference/#login","title":"login","text":"<p>Log in to Source Coop and save authentication cookies.</p> <pre><code>source-coop login [--email EMAIL] [--password PASSWORD]\n</code></pre> Option Description <code>--email</code> Email address (will prompt if not provided) <code>--password</code> Password (will prompt securely if not provided)"},{"location":"cli-reference/#whoami","title":"whoami","text":"<p>Check who you're currently logged in as.</p> <pre><code>source-coop whoami\n</code></pre> <p>This command has no options. It displays information about the currently authenticated user.</p>"},{"location":"cli-reference/#repos","title":"repos","text":"<p>List Source Coop repositories.</p> <pre><code>source-coop repos [--featured] [--limit LIMIT] [--next NEXT] [--search SEARCH] [--export {json,csv,parquet}] [--output OUTPUT]\n</code></pre> Option Description <code>--featured</code> List featured repositories <code>--limit</code> Maximum number of repositories to return (default: 10) <code>--next</code> Next page token for pagination <code>--search</code> Search query to filter repositories <code>--export</code> Export results to specified format (<code>json</code>, <code>csv</code>, or <code>parquet</code>) <code>--output</code> Path for exported file (default: ./exports/source-coop-repositories-.)"},{"location":"cli-reference/#profile","title":"profile","text":"<p>Get profile information for a user or organization.</p> <pre><code>source-coop profile USERNAME\n</code></pre> Argument Description <code>USERNAME</code> Username or account ID"},{"location":"cli-reference/#members","title":"members","text":"<p>Get members of an organization.</p> <pre><code>source-coop members ORGANIZATION\n</code></pre> Argument Description <code>ORGANIZATION</code> Organization username or account ID"},{"location":"cli-reference/#summarize","title":"summarize","text":"<p>Summarize repository contents without downloading.</p> <pre><code>source-coop summarize REPOSITORY [--file-type FILE_TYPE]\n</code></pre> Argument/Option Description <code>REPOSITORY</code> Repository URL or S3 URL <code>--file-type</code> File type to filter by (e.g. '.csv')"},{"location":"cli-reference/#download","title":"download","text":"<p>Download repository contents.</p> <pre><code>source-coop download REPOSITORY [--file-type FILE_TYPE] [--output-dir OUTPUT_DIR] [--threads THREADS] [--multipart MULTIPART] [--quiet]\n</code></pre> Argument/Option Description <code>REPOSITORY</code> Repository URL or S3 URL <code>--file-type</code> File type to filter by (e.g. '.csv') <code>--output-dir</code> Directory to save downloaded files (default: ./source-coop-) <code>--threads</code> Maximum number of concurrent downloads (default: 10) <code>--multipart</code> Number of parts to split large file downloads into (default: 8, 0 to disable) <code>--quiet</code> Don't ask for confirmation and don't display file list"},{"location":"cli-reference/#url-formats","title":"URL Formats","text":"<p>The <code>summarize</code> and <code>download</code> commands accept both web URLs and S3 URLs:</p> <ul> <li>Web URL format: <code>https://source.coop/ACCOUNT/REPOSITORY</code></li> <li>S3 URL format: <code>s3://ACCOUNT/REPOSITORY</code></li> </ul> <p>The tool automatically converts between these formats, so you can use whichever is more convenient.</p>"},{"location":"cli-reference/#common-command-patterns","title":"Common Command Patterns","text":""},{"location":"cli-reference/#viewing-repository-contents-before-downloading","title":"Viewing repository contents before downloading","text":"<pre><code># First, summarize the repository to see what's in it\nsource-coop summarize https://source.coop/account/repository\n\n# Then, download specific file types of interest\nsource-coop download https://source.coop/account/repository --file-type .tif\n</code></pre>"},{"location":"cli-reference/#exporting-repository-metadata-for-analysis","title":"Exporting repository metadata for analysis","text":"<pre><code># Export repository information to CSV\nsource-coop repos --search \"landsat\" --export csv --output landsat-repos.csv\n</code></pre>"},{"location":"cli-reference/#downloading-with-increased-parallelism-for-speed","title":"Downloading with increased parallelism for speed","text":"<pre><code># Use more threads and parts for faster downloads\nsource-coop download s3://account/repository --threads 20 --multipart 16\n</code></pre>"},{"location":"cli-reference/#scriptedautomated-downloads","title":"Scripted/automated downloads","text":"<pre><code># Use quiet mode for scripted operations\nsource-coop download s3://account/repository --quiet\n</code></pre>"},{"location":"cli-reference/#environment-variables","title":"Environment Variables","text":"<p>The Source Coop CLI does not currently use environment variables for configuration. All settings are controlled via command-line options.</p>"},{"location":"cli-reference/#exit-codes","title":"Exit Codes","text":"<p>The CLI returns standard exit codes:</p> <ul> <li><code>0</code>: Command completed successfully</li> <li>Non-zero: Command failed (exact code depends on the nature of the failure)</li> </ul> <p>You can check the exit code in scripts with <code>$?</code> (bash) or <code>$LASTEXITCODE</code> (PowerShell).</p>"},{"location":"cli-reference/#configuration-files","title":"Configuration Files","text":"<p>The Source Coop CLI stores its configuration in the following locations:</p> <ul> <li>Authentication cookies: <code>~/.config/source-coop/cookies.json</code> (Linux/macOS) or similar paths on other platforms</li> </ul> <p>This file contains authentication tokens needed to access Source Coop without re-entering your credentials.</p>"},{"location":"installation/","title":"Installation","text":"<p>This guide covers how to install the Source Coop Python SDK and CLI. The package can be installed either directly into your Python environment or within a virtual environment for better isolation.</p>"},{"location":"installation/#requirements","title":"Requirements","text":"<p>The Source Coop package requires:</p> <ul> <li>Python 3.7 or higher</li> <li>pip (Python package manager)</li> </ul>"},{"location":"installation/#installing-with-pip","title":"Installing with pip","text":"<p>The simplest way to install the package is using pip:</p> <pre><code>pip install source-coop\n</code></pre> <p>This will install the Source Coop package along with all its dependencies.</p>"},{"location":"installation/#installing-in-a-virtual-environment","title":"Installing in a Virtual Environment","text":"<p>For better isolation and to avoid potential conflicts with other packages, it's recommended to install the Source Coop package within a virtual environment.</p>"},{"location":"installation/#using-venv-pythons-built-in-virtual-environment","title":"Using venv (Python's built-in virtual environment)","text":"<ol> <li>Create a new virtual environment:</li> </ol> <pre><code># macOS/Linux\npython3 -m venv source-coop-env\n\n# Windows\npython -m venv source-coop-env\n</code></pre> <ol> <li>Activate the virtual environment:</li> </ol> <pre><code># macOS/Linux\nsource source-coop-env/bin/activate\n\n# Windows\nsource-coop-env\\Scripts\\activate\n</code></pre> <ol> <li>Install the package within the virtual environment:</li> </ol> <pre><code>pip install source-coop\n</code></pre>"},{"location":"installation/#using-conda-if-you-use-anacondaminiconda","title":"Using conda (if you use Anaconda/Miniconda)","text":"<ol> <li>Create a new conda environment:</li> </ol> <pre><code>conda create -n source-coop-env python=3.9\n</code></pre> <ol> <li>Activate the conda environment:</li> </ol> <pre><code>conda activate source-coop-env\n</code></pre> <ol> <li>Install the package:</li> </ol> <pre><code>pip install source-coop\n</code></pre>"},{"location":"installation/#installing-from-source","title":"Installing from Source","text":"<p>If you want to install the latest development version or make modifications to the code, you can install from source:</p> <ol> <li>Clone the repository:</li> </ol> <pre><code>git clone https://github.com/samapriya/source-coop.git\ncd source-coop\n</code></pre> <ol> <li>Install in development mode:</li> </ol> <pre><code>pip install -e .\n</code></pre>"},{"location":"installation/#verifying-installation","title":"Verifying Installation","text":"<p>To verify that the Source Coop package is correctly installed, you can run:</p> <pre><code>source-coop --help\n</code></pre> <p>This should display the available commands and options.</p> <p>You can also verify the installation within Python:</p> <pre><code>import source_coop\nprint(source_coop.__version__)\n</code></pre>"},{"location":"installation/#dependencies","title":"Dependencies","text":"<p>The Source Coop package depends on several libraries, which are automatically installed by pip:</p> <ul> <li>requests: For making HTTP requests to the Source Coop API</li> <li>boto3: For interacting with the S3-compatible storage</li> <li>rich: For nice command-line output and progress bars</li> <li>pandas and pyarrow: For data handling and exporting</li> <li>tqdm: For progress tracking</li> <li>aiohttp and aiofiles: For asynchronous downloads</li> </ul> <p>These dependencies are listed in the requirements.txt file and are automatically installed by pip.</p>"},{"location":"installation/#configuration","title":"Configuration","text":"<p>After installation, you need to authenticate with Source Coop before using most features. See the Login Guide for details on how to authenticate.</p>"},{"location":"installation/#troubleshooting","title":"Troubleshooting","text":"<p>If you encounter issues during installation:</p> <ul> <li>Make sure your Python version is 3.7 or higher</li> <li>Try upgrading pip: <code>pip install --upgrade pip</code></li> <li>Check your internet connection</li> <li>If installing in a corporate environment, check if you need to configure a proxy</li> </ul> <p>For more specific issues, please check the project's GitHub repository.</p>"},{"location":"license/","title":"License","text":"<p> <pre><code>Apache License\nVersion 2.0, January 2004\nhttp://www.apache.org/licenses/\n</code></pre> </p> <p>TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION</p> <ol> <li> <p>Definitions.</p> <p>\"License\" shall mean the terms and conditions for use, reproduction,   and distribution as defined by Sections 1 through 9 of this document.</p> <p>\"Licensor\" shall mean the copyright owner or entity authorized by   the copyright owner that is granting the License.</p> <p>\"Legal Entity\" shall mean the union of the acting entity and all   other entities that control, are controlled by, or are under common   control with that entity. For the purposes of this definition,   \"control\" means (i) the power, direct or indirect, to cause the   direction or management of such entity, whether by contract or   otherwise, or (ii) ownership of fifty percent (50%) or more of the   outstanding shares, or (iii) beneficial ownership of such entity.</p> <p>\"You\" (or \"Your\") shall mean an individual or Legal Entity   exercising permissions granted by this License.</p> <p>\"Source\" form shall mean the preferred form for making modifications,   including but not limited to software source code, documentation   source, and configuration files.</p> <p>\"Object\" form shall mean any form resulting from mechanical   transformation or translation of a Source form, including but   not limited to compiled object code, generated documentation,   and conversions to other media types.</p> <p>\"Work\" shall mean the work of authorship, whether in Source or   Object form, made available under the License, as indicated by a   copyright notice that is included in or attached to the work   (an example is provided in the Appendix below).</p> <p>\"Derivative Works\" shall mean any work, whether in Source or Object   form, that is based on (or derived from) the Work and for which the   editorial revisions, annotations, elaborations, or other modifications   represent, as a whole, an original work of authorship. For the purposes   of this License, Derivative Works shall not include works that remain   separable from, or merely link (or bind by name) to the interfaces of,   the Work and Derivative Works thereof.</p> <p>\"Contribution\" shall mean any work of authorship, including   the original version of the Work and any modifications or additions   to that Work or Derivative Works thereof, that is intentionally   submitted to Licensor for inclusion in the Work by the copyright owner   or by an individual or Legal Entity authorized to submit on behalf of   the copyright owner. For the purposes of this definition, \"submitted\"   means any form of electronic, verbal, or written communication sent   to the Licensor or its representatives, including but not limited to   communication on electronic mailing lists, source code control systems,   and issue tracking systems that are managed by, or on behalf of, the   Licensor for the purpose of discussing and improving the Work, but   excluding communication that is conspicuously marked or otherwise   designated in writing by the copyright owner as \"Not a Contribution.\"</p> <p>\"Contributor\" shall mean Licensor and any individual or Legal Entity   on behalf of whom a Contribution has been received by Licensor and   subsequently incorporated within the Work.</p> </li> <li> <p>Grant of Copyright License. Subject to the terms and conditions of       this License, each Contributor hereby grants to You a perpetual,       worldwide, non-exclusive, no-charge, royalty-free, irrevocable       copyright license to reproduce, prepare Derivative Works of,       publicly display, publicly perform, sublicense, and distribute the       Work and such Derivative Works in Source or Object form.</p> </li> <li> <p>Grant of Patent License. Subject to the terms and conditions of       this License, each Contributor hereby grants to You a perpetual,       worldwide, non-exclusive, no-charge, royalty-free, irrevocable       (except as stated in this section) patent license to make, have made,       use, offer to sell, sell, import, and otherwise transfer the Work,       where such license applies only to those patent claims licensable       by such Contributor that are necessarily infringed by their       Contribution(s) alone or by combination of their Contribution(s)       with the Work to which such Contribution(s) was submitted. If You       institute patent litigation against any entity (including a       cross-claim or counterclaim in a lawsuit) alleging that the Work       or a Contribution incorporated within the Work constitutes direct       or contributory patent infringement, then any patent licenses       granted to You under this License for that Work shall terminate       as of the date such litigation is filed.</p> </li> <li> <p>Redistribution. You may reproduce and distribute copies of the       Work or Derivative Works thereof in any medium, with or without       modifications, and in Source or Object form, provided that You       meet the following conditions:</p> <p>(a) You must give any other recipients of the Work or       Derivative Works a copy of this License; and</p> <p>(b) You must cause any modified files to carry prominent notices       stating that You changed the files; and</p> <p>\u00a9 You must retain, in the Source form of any Derivative Works       that You distribute, all copyright, patent, trademark, and       attribution notices from the Source form of the Work,       excluding those notices that do not pertain to any part of       the Derivative Works; and</p> <p>(d) If the Work includes a \"NOTICE\" text file as part of its       distribution, then any Derivative Works that You distribute must       include a readable copy of the attribution notices contained       within such NOTICE file, excluding those notices that do not       pertain to any part of the Derivative Works, in at least one       of the following places: within a NOTICE text file distributed       as part of the Derivative Works; within the Source form or       documentation, if provided along with the Derivative Works; or,       within a display generated by the Derivative Works, if and       wherever such third-party notices normally appear. The contents       of the NOTICE file are for informational purposes only and       do not modify the License. You may add Your own attribution       notices within Derivative Works that You distribute, alongside       or as an addendum to the NOTICE text from the Work, provided       that such additional attribution notices cannot be construed       as modifying the License.</p> <p>You may add Your own copyright statement to Your modifications and   may provide additional or different license terms and conditions   for use, reproduction, or distribution of Your modifications, or   for any such Derivative Works as a whole, provided Your use,   reproduction, and distribution of the Work otherwise complies with   the conditions stated in this License.</p> </li> <li> <p>Submission of Contributions. Unless You explicitly state otherwise,       any Contribution intentionally submitted for inclusion in the Work       by You to the Licensor shall be under the terms and conditions of       this License, without any additional terms or conditions.       Notwithstanding the above, nothing herein shall supersede or modify       the terms of any separate license agreement you may have executed       with Licensor regarding such Contributions.</p> </li> <li> <p>Trademarks. This License does not grant permission to use the trade       names, trademarks, service marks, or product names of the Licensor,       except as required for reasonable and customary use in describing the       origin of the Work and reproducing the content of the NOTICE file.</p> </li> <li> <p>Disclaimer of Warranty. Unless required by applicable law or       agreed to in writing, Licensor provides the Work (and each       Contributor provides its Contributions) on an \"AS IS\" BASIS,       WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or       implied, including, without limitation, any warranties or conditions       of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A       PARTICULAR PURPOSE. You are solely responsible for determining the       appropriateness of using or redistributing the Work and assume any       risks associated with Your exercise of permissions under this License.</p> </li> <li> <p>Limitation of Liability. In no event and under no legal theory,       whether in tort (including negligence), contract, or otherwise,       unless required by applicable law (such as deliberate and grossly       negligent acts) or agreed to in writing, shall any Contributor be       liable to You for damages, including any direct, indirect, special,       incidental, or consequential damages of any character arising as a       result of this License or out of the use or inability to use the       Work (including but not limited to damages for loss of goodwill,       work stoppage, computer failure or malfunction, or any and all       other commercial damages or losses), even if such Contributor       has been advised of the possibility of such damages.</p> </li> <li> <p>Accepting Warranty or Additional Liability. While redistributing       the Work or Derivative Works thereof, You may choose to offer,       and charge a fee for, acceptance of support, warranty, indemnity,       or other liability obligations and/or rights consistent with this       License. However, in accepting such obligations, You may act only       on Your own behalf and on Your sole responsibility, not on behalf       of any other Contributor, and only if You agree to indemnify,       defend, and hold each Contributor harmless for any liability       incurred by, or claims asserted against, such Contributor by reason       of your accepting any such warranty or additional liability.</p> </li> </ol> <p>END OF TERMS AND CONDITIONS</p> <p>APPENDIX: How to apply the Apache License to your work.</p> <pre><code>  To apply the Apache License to your work, attach the following\n  boilerplate notice, with the fields enclosed by brackets \"{}\"\n  replaced with your own identifying information. (Don't include\n  the brackets!)  The text should be enclosed in the appropriate\n  comment syntax for the file format. We also recommend that a\n  file or class name and description of purpose be included on the\n  same \"printed page\" as the copyright notice for easier\n  identification within third-party archives.\n</code></pre> <p>Copyright {2019} {Samapriya Roy}</p> <p>Licensed under the Apache License, Version 2.0 (the \"License\");    you may not use this file except in compliance with the License.    You may obtain a copy of the License at</p> <pre><code>   http://www.apache.org/licenses/LICENSE-2.0\n</code></pre> <p>Unless required by applicable law or agreed to in writing, software    distributed under the License is distributed on an \"AS IS\" BASIS,    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.    See the License for the specific language governing permissions and    limitations under the License.</p>"},{"location":"projects/download/","title":"Downloading Repository Contents","text":"<p>The <code>download</code> command allows you to download files from Source Coop repositories efficiently. It supports concurrent downloads, multipart transfers for large files, and filtering by file type.</p>"},{"location":"projects/download/#cli-usage","title":"CLI Usage","text":"<p>To download all files from a repository:</p> <pre><code>source-coop download REPOSITORY_URL\n</code></pre> <p>You can use either a web URL (https://source.coop/account/repository) or an S3 URL (s3://account/repository).</p>"},{"location":"projects/download/#filtering-by-file-type","title":"Filtering by File Type","text":"<p>You can filter to download only files of a specific type:</p> <pre><code>source-coop download REPOSITORY_URL --file-type .tif\n</code></pre> <p>This will only download files with the specified extension (e.g., <code>.tif</code>, <code>.csv</code>, <code>.json</code>).</p>"},{"location":"projects/download/#specifying-output-directory","title":"Specifying Output Directory","text":"<p>By default, files are downloaded to a directory named <code>./source-coop-&lt;repository_name&gt;</code>. You can specify a custom output directory:</p> <pre><code>source-coop download REPOSITORY_URL --output-dir ./my-data-directory\n</code></pre>"},{"location":"projects/download/#controlling-concurrency","title":"Controlling Concurrency","text":"<p>You can adjust the number of concurrent downloads to optimize for your connection:</p> <pre><code>source-coop download REPOSITORY_URL --threads 20\n</code></pre> <p>This will download up to 20 files simultaneously (default is 10).</p>"},{"location":"projects/download/#multipart-downloads","title":"Multipart Downloads","text":"<p>For large files, the download command uses multipart transfers by default. You can adjust the number of parts or disable this feature:</p> <pre><code># Use 16 parts for large files\nsource-coop download REPOSITORY_URL --multipart 16\n\n# Disable multipart downloading\nsource-coop download REPOSITORY_URL --multipart 0\n</code></pre>"},{"location":"projects/download/#quiet-mode","title":"Quiet Mode","text":"<p>For automated scripts or when you don't need to see detailed output:</p> <pre><code>source-coop download REPOSITORY_URL --quiet\n</code></pre> <p>This skips confirmation prompts and detailed file listings.</p>"},{"location":"projects/download/#example-output","title":"Example Output","text":"<pre><code>Using S3 URL: s3://example-org/landsat-dataset\n\nListing objects...\n\nRepository Summary\n\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n\u2503 Metric     \u2502 Value         \u2503\n\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\n\u2502 Total Files\u2502 156           \u2502\n\u2502 Total Size \u2502 2.34 GB       \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n[... file listings ...]\n\nDownload 156 files (2.34 GB) to ./source-coop-landsat-dataset? [y/n]: y\n\nDownloading 156 files to ./source-coop-landsat-dataset using up to 10 concurrent connections and 8 parts for large files...\n\n[file1.tif] \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 100% \u2022 25.6 MB \u2022 5.4 MB/s \u2022 0:00:04\n[file2.tif] \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 100% \u2022 25.3 MB \u2022 5.2 MB/s \u2022 0:00:04\n[file3.tif] \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 100% \u2022 24.9 MB \u2022 6.1 MB/s \u2022 0:00:04\n[...]\n\nSuccessfully downloaded 156 of 156 files\n</code></pre>"},{"location":"projects/download/#cli-help","title":"CLI Help","text":"<p>For more options and help:</p> <pre><code>source-coop download --help\n</code></pre>"},{"location":"projects/download/#python-sdk-usage","title":"Python SDK Usage","text":""},{"location":"projects/download/#basic-download","title":"Basic Download","text":"<pre><code>from source_coop import SourceCoopClient\nfrom source_coop.s3 import SourceCoopS3\nfrom source_coop.commands.download import download_s3_objects\n\ndef download_repository(repository_url, output_dir=None, file_type=None):\n    # Create a client instance\n    client = SourceCoopClient()\n\n    # Convert repository URL to S3 URL if needed\n    if repository_url.startswith(\"http\"):\n        s3_url = SourceCoopS3.convert_repo_url_to_s3_url(repository_url)\n        if not s3_url:\n            print(\"Failed to convert repository URL to S3 URL.\")\n            return False\n    else:\n        s3_url = repository_url\n\n    print(f\"Using S3 URL: {s3_url}\")\n\n    # Set default output directory if not provided\n    if not output_dir:\n        # Extract repository name from S3 URL\n        _, prefix = SourceCoopS3.parse_s3_url(s3_url)\n        repo_name = prefix.strip('/').split('/')[-1] if prefix else \"download\"\n        output_dir = f\"./source-coop-{repo_name}\"\n\n    print(f\"Using output directory: {output_dir}\")\n\n    # Get objects to download\n    print(\"Listing objects...\")\n    objects, summary = client.s3.list_objects_with_summary(s3_url, file_type=file_type)\n\n    if not objects:\n        print(\"No objects found to download.\")\n        return False\n\n    # Display summary\n    print(f\"\\nFound {summary['total_files']} files ({summary['total_size_human']})\")\n\n    # Download the files\n    successful = download_s3_objects(\n        objects,\n        output_dir,\n        max_concurrent=10,\n        multipart_count=8,\n        quiet=False\n    )\n\n    print(f\"\\nDownload complete. {successful} files downloaded successfully.\")\n    return successful &gt; 0\n\nif __name__ == \"__main__\":\n    download_repository(\"https://source.coop/example-org/landsat-dataset\")\n</code></pre>"},{"location":"projects/download/#customized-download-with-options","title":"Customized Download with Options","text":"<pre><code>from source_coop import SourceCoopClient\nfrom source_coop.s3 import SourceCoopS3\nfrom source_coop.commands.download import download_s3_objects\nfrom pathlib import Path\n\ndef download_with_options(\n    repository_url,\n    output_dir=None,\n    file_type=None,\n    max_concurrent=10,\n    multipart_count=8,\n    quiet=False\n):\n    client = SourceCoopClient()\n\n    # Convert repository URL to S3 URL if needed\n    if repository_url.startswith(\"http\"):\n        s3_url = SourceCoopS3.convert_repo_url_to_s3_url(repository_url)\n        if not s3_url:\n            print(\"Failed to convert repository URL to S3 URL.\")\n            return False\n    else:\n        s3_url = repository_url\n\n    print(f\"Using S3 URL: {s3_url}\")\n\n    # Set default output directory if not provided\n    if not output_dir:\n        # Extract repository name from S3 URL\n        _, prefix = SourceCoopS3.parse_s3_url(s3_url)\n        repo_name = prefix.strip('/').split('/')[-1] if prefix else \"download\"\n        output_dir = f\"./source-coop-{repo_name}\"\n\n    # Ensure output directory exists\n    output_path = Path(output_dir)\n    output_path.mkdir(parents=True, exist_ok=True)\n\n    print(f\"Using output directory: {output_dir}\")\n    print(f\"Concurrent downloads: {max_concurrent}\")\n    print(f\"Multipart count: {multipart_count}\")\n\n    # Get objects and summary\n    if not quiet:\n        print(\"Listing objects...\")\n\n    objects, summary = client.s3.list_objects_with_summary(s3_url, file_type=file_type)\n\n    if not objects:\n        print(\"No objects found to download.\")\n        return False\n\n    # Display summary if not in quiet mode\n    if not quiet:\n        print(f\"\\nFound {summary['total_files']} files ({summary['total_size_human']})\")\n\n        # Show file type breakdown\n        print(\"\\nFile Types:\")\n        for ext, stats in sorted(summary['file_types'].items(), key=lambda x: x[1]['size'], reverse=True):\n            percentage = (stats['size'] / summary['total_size'] * 100) if summary['total_size'] &gt; 0 else 0\n            print(f\"- {ext}: {stats['count']} files, {SourceCoopS3.human_readable_size(stats['size'])} ({percentage:.2f}%)\")\n\n    # Download the files\n    successful = download_s3_objects(\n        objects,\n        output_dir,\n        max_concurrent=max_concurrent,\n        multipart_count=multipart_count,\n        quiet=quiet\n    )\n\n    if not quiet:\n        print(f\"\\nDownload complete. {successful} of {len(objects)} files downloaded successfully.\")\n\n    return successful\n\nif __name__ == \"__main__\":\n    download_with_options(\n        \"https://source.coop/example-org/landsat-dataset\",\n        output_dir=\"./data\",\n        file_type=\".tif\",\n        max_concurrent=20,\n        multipart_count=16,\n        quiet=False\n    )\n</code></pre>"},{"location":"projects/download/#downloading-specific-files","title":"Downloading Specific Files","text":"<p>If you want to download only specific files rather than everything in a repository:</p> <pre><code>from source_coop import SourceCoopClient\nfrom source_coop.s3 import SourceCoopS3\nfrom source_coop.commands.download import download_s3_objects\nfrom pathlib import Path\n\ndef download_specific_files(repository_url, key_patterns, output_dir=None):\n    client = SourceCoopClient()\n\n    # Convert repository URL to S3 URL if needed\n    if repository_url.startswith(\"http\"):\n        s3_url = SourceCoopS3.convert_repo_url_to_s3_url(repository_url)\n        if not s3_url:\n            print(\"Failed to convert repository URL to S3 URL.\")\n            return False\n    else:\n        s3_url = repository_url\n\n    # Set default output directory if not provided\n    if not output_dir:\n        # Extract repository name from S3 URL\n        _, prefix = SourceCoopS3.parse_s3_url(s3_url)\n        repo_name = prefix.strip('/').split('/')[-1] if prefix else \"download\"\n        output_dir = f\"./source-coop-{repo_name}\"\n\n    # Ensure output directory exists\n    output_path = Path(output_dir)\n    output_path.mkdir(parents=True, exist_ok=True)\n\n    print(f\"Using S3 URL: {s3_url}\")\n    print(f\"Using output directory: {output_dir}\")\n\n    # Get all objects in the repository\n    print(\"Listing objects...\")\n    objects, _ = client.s3.list_objects_with_summary(s3_url)\n\n    if not objects:\n        print(\"No objects found in the repository.\")\n        return False\n\n    # Filter objects based on patterns\n    filtered_objects = []\n    for obj in objects:\n        key = obj['key']\n        if any(pattern in key for pattern in key_patterns):\n            filtered_objects.append(obj)\n\n    if not filtered_objects:\n        print(\"No objects matched the specified patterns.\")\n        return False\n\n    # Calculate total size\n    total_size = sum(obj['size'] for obj in filtered_objects)\n    total_size_human = SourceCoopS3.human_readable_size(total_size)\n\n    print(f\"Found {len(filtered_objects)} matching files ({total_size_human})\")\n\n    # Download the filtered objects\n    successful = download_s3_objects(\n        filtered_objects,\n        output_dir,\n        max_concurrent=10,\n        multipart_count=8,\n        quiet=False\n    )\n\n    print(f\"\\nDownload complete. {successful} of {len(filtered_objects)} files downloaded successfully.\")\n    return successful &gt; 0\n\nif __name__ == \"__main__\":\n    # Example: Download only band 5 and band 7 files\n    download_specific_files(\n        \"https://source.coop/example-org/landsat-dataset\", \n        [\"_B5.\", \"_B7.\"]\n    )\n</code></pre>"},{"location":"projects/download/#resumable-downloads","title":"Resumable Downloads","text":"<p>For large repositories, you might want to implement a resumable download that can continue after interruptions:</p> <pre><code>from source_coop import SourceCoopClient\nfrom source_coop.s3 import SourceCoopS3\nfrom source_coop.commands.download import download_s3_objects\nfrom pathlib import Path\nimport json\nimport os\n\ndef resumable_download(repository_url, output_dir=None, file_type=None):\n    client = SourceCoopClient()\n\n    # Convert repository URL to S3 URL if needed\n    if repository_url.startswith(\"http\"):\n        s3_url = SourceCoopS3.convert_repo_url_to_s3_url(repository_url)\n        if not s3_url:\n            print(\"Failed to convert repository URL to S3 URL.\")\n            return False\n    else:\n        s3_url = repository_url\n\n    # Set default output directory if not provided\n    if not output_dir:\n        # Extract repository name from S3 URL\n        _, prefix = SourceCoopS3.parse_s3_url(s3_url)\n        repo_name = prefix.strip('/').split('/')[-1] if prefix else \"download\"\n        output_dir = f\"./source-coop-{repo_name}\"\n\n    # Ensure output directory exists\n    output_path = Path(output_dir)\n    output_path.mkdir(parents=True, exist_ok=True)\n\n    # Path for the download manifest file\n    manifest_path = output_path / \".download_manifest.json\"\n\n    # Get objects to download\n    print(f\"Using S3 URL: {s3_url}\")\n    print(\"Listing objects...\")\n    objects, summary = client.s3.list_objects_with_summary(s3_url, file_type=file_type)\n\n    if not objects:\n        print(\"No objects found to download.\")\n        return False\n\n    print(f\"\\nFound {summary['total_files']} files ({summary['total_size_human']})\")\n\n    # Check if we have a previous manifest\n    already_downloaded = set()\n    if manifest_path.exists():\n        try:\n            with open(manifest_path, 'r') as f:\n                manifest = json.load(f)\n                already_downloaded = set(manifest.get('downloaded', []))\n\n            print(f\"Found existing manifest: {len(already_downloaded)} files already downloaded\")\n        except Exception as e:\n            print(f\"Error reading manifest file: {e}\")\n            already_downloaded = set()\n\n    # Filter out already downloaded files\n    to_download = []\n    skipped = 0\n\n    for obj in objects:\n        key = obj['key']\n        file_path = output_path / key\n\n        # Skip if already in manifest or if file exists and size matches\n        if key in already_downloaded and file_path.exists() and file_path.stat().st_size == obj['size']:\n            skipped += 1\n            continue\n\n        to_download.append(obj)\n\n    print(f\"Skipping {skipped} already downloaded files.\")\n    print(f\"Downloading {len(to_download)} files...\")\n\n    if not to_download:\n        print(\"All files already downloaded.\")\n        return True\n\n    # Download the remaining files\n    successful = download_s3_objects(\n        to_download,\n        output_dir,\n        max_concurrent=10,\n        multipart_count=8,\n        quiet=False\n    )\n\n    # Update manifest with newly downloaded files\n    if successful &gt; 0:\n        # Add new successful downloads to our set\n        for obj in to_download[:successful]:  # Assuming first 'successful' items were downloaded\n            already_downloaded.add(obj['key'])\n\n        # Save updated manifest\n        try:\n            with open(manifest_path, 'w') as f:\n                json.dump({\n                    'repository': s3_url,\n                    'downloaded': list(already_downloaded)\n                }, f, indent=2)\n            print(f\"Updated download manifest ({len(already_downloaded)} files recorded)\")\n        except Exception as e:\n            print(f\"Error saving manifest file: {e}\")\n\n    print(f\"\\nDownload complete. {successful} of {len(to_download)} files downloaded in this session.\")\n    print(f\"Total downloaded: {len(already_downloaded)} of {len(objects)} files\")\n\n    return successful &gt; 0 or skipped &gt; 0\n\nif __name__ == \"__main__\":\n    resumable_download(\"https://source.coop/example-org/landsat-dataset\")\n</code></pre>"},{"location":"projects/download/#interactive-file-selection","title":"Interactive File Selection","text":"<p>For interactive applications, you might want to let the user select which files to download:</p> <pre><code>from source_coop import SourceCoopClient\nfrom source_coop.s3 import SourceCoopS3\nfrom source_coop.commands.download import download_s3_objects\nfrom rich.console import Console\nfrom rich.prompt import Confirm, Prompt\nfrom rich import print\nfrom pathlib import Path\nimport re\n\ndef interactive_download(repository_url, output_dir=None):\n    client = SourceCoopClient()\n    console = Console()\n\n    # Convert repository URL to S3 URL if needed\n    if repository_url.startswith(\"http\"):\n        s3_url = SourceCoopS3.convert_repo_url_to_s3_url(repository_url)\n        if not s3_url:\n            console.print(\"[red]Failed to convert repository URL to S3 URL.[/red]\")\n            return False\n    else:\n        s3_url = repository_url\n\n    console.print(f\"[bold]Using S3 URL:[/bold] {s3_url}\")\n\n    # Set default output directory if not provided\n    if not output_dir:\n        # Extract repository name from S3 URL\n        _, prefix = SourceCoopS3.parse_s3_url(s3_url)\n        repo_name = prefix.strip('/').split('/')[-1] if prefix else \"download\"\n        output_dir = f\"./source-coop-{repo_name}\"\n\n    # Ensure output directory exists\n    output_path = Path(output_dir)\n    output_path.mkdir(parents=True, exist_ok=True)\n\n    console.print(f\"[bold]Using output directory:[/bold] {output_dir}\")\n\n    # Get objects to download\n    with console.status(\"[bold green]Listing objects...[/bold green]\"):\n        objects, summary = client.s3.list_objects_with_summary(s3_url)\n\n    if not objects:\n        console.print(\"[yellow]No objects found in the repository.[/yellow]\")\n        return False\n\n    console.print(f\"\\n[bold]Repository Summary:[/bold]\")\n    console.print(f\"Total Files: {summary['total_files']}\")\n    console.print(f\"Total Size: {summary['total_size_human']}\")\n\n    # Group files by extension\n    extensions = {}\n    for ext, stats in summary['file_types'].items():\n        extensions[ext] = stats\n\n    # Show file type breakdown\n    console.print(\"\\n[bold]File Types:[/bold]\")\n    for ext, stats in sorted(extensions.items(), key=lambda x: x[1]['size'], reverse=True):\n        percentage = (stats['size'] / summary['total_size'] * 100) if summary['total_size'] &gt; 0 else 0\n        console.print(f\"- {ext}: {stats['count']} files, {SourceCoopS3.human_readable_size(stats['size'])} ({percentage:.2f}%)\")\n\n    # Prompt for download options\n    console.print(\"\\n[bold]Select files to download:[/bold]\")\n    console.print(\"1. Download all files\")\n    console.print(\"2. Download by file extension\")\n    console.print(\"3. Download by pattern match\")\n    console.print(\"4. Cancel\")\n\n    choice = Prompt.ask(\"Enter your choice\", choices=[\"1\", \"2\", \"3\", \"4\"], default=\"1\")\n\n    selected_objects = []\n\n    if choice == \"1\":\n        # Download all files\n        selected_objects = objects\n        console.print(f\"[bold green]Selected all {len(objects)} files for download.[/bold green]\")\n\n    elif choice == \"2\":\n        # Download by file extension\n        console.print(\"\\n[bold]Available extensions:[/bold]\")\n        ext_choices = list(extensions.keys())\n\n        for i, ext in enumerate(ext_choices, 1):\n            stats = extensions[ext]\n            console.print(f\"{i}. {ext}: {stats['count']} files, {SourceCoopS3.human_readable_size(stats['size'])}\")\n\n        ext_choice = Prompt.ask(\"Enter extension number\", default=\"1\")\n        try:\n            ext_index = int(ext_choice) - 1\n            if 0 &lt;= ext_index &lt; len(ext_choices):\n                selected_ext = ext_choices[ext_index]\n                selected_objects = [obj for obj in objects if obj['extension'] == selected_ext]\n                console.print(f\"[bold green]Selected {len(selected_objects)} {selected_ext} files for download.[/bold green]\")\n            else:\n                console.print(\"[red]Invalid choice.[/red]\")\n                return False\n        except ValueError:\n            console.print(\"[red]Invalid number.[/red]\")\n            return False\n\n    elif choice == \"3\":\n        # Download by pattern match\n        pattern = Prompt.ask(\"Enter a pattern to match in filenames (e.g., 'landsat' or 'B5.TIF')\")\n        try:\n            regex = re.compile(pattern, re.IGNORECASE)\n            selected_objects = [obj for obj in objects if regex.search(obj['key'])]\n            console.print(f\"[bold green]Selected {len(selected_objects)} files matching '{pattern}'.[/bold green]\")\n\n            if not selected_objects:\n                console.print(\"[yellow]No files matched the pattern.[/yellow]\")\n                return False\n        except re.error:\n            console.print(\"[red]Invalid regular expression.[/red]\")\n            return False\n\n    elif choice == \"4\":\n        # Cancel\n        console.print(\"[yellow]Download cancelled.[/yellow]\")\n        return False\n\n    # Calculate total size\n    total_size = sum(obj['size'] for obj in selected_objects)\n    total_size_human = SourceCoopS3.human_readable_size(total_size)\n\n    # Confirm download\n    console.print(f\"\\nReady to download {len(selected_objects)} files ({total_size_human}) to {output_dir}\")\n\n    if not Confirm.ask(\"Continue with download?\"):\n        console.print(\"[yellow]Download cancelled.[/yellow]\")\n        return False\n\n    # Choose download options\n    max_concurrent = int(Prompt.ask(\"Maximum concurrent downloads\", default=\"10\"))\n    multipart_count = int(Prompt.ask(\"Multipart count for large files (0 to disable)\", default=\"8\"))\n\n    # Download the selected files\n    successful = download_s3_objects(\n        selected_objects,\n        output_dir,\n        max_concurrent=max_concurrent,\n        multipart_count=multipart_count,\n        quiet=False\n    )\n\n    console.print(f\"\\n[bold]Download complete. {successful} of {len(selected_objects)} files downloaded successfully.[/bold]\")\n    return successful &gt; 0\n\nif __name__ == \"__main__\":\n    interactive_download(\"https://source.coop/example-org/landsat-dataset\")\n</code></pre>"},{"location":"projects/download/#error-handling","title":"Error Handling","text":"<p>When working with downloads, it's important to handle potential errors:</p> <pre><code>from source_coop import SourceCoopClient\nfrom source_coop.s3 import SourceCoopS3\nfrom source_coop.commands.download import download_s3_objects\nimport logging\nfrom pathlib import Path\nimport time\n\n# Configure logging\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\n\ndef download_with_error_handling(repository_url, output_dir=None, file_type=None, retries=3):\n    client = SourceCoopClient()\n\n    try:\n        # Convert repository URL to S3 URL if needed\n        if repository_url.startswith(\"http\"):\n            s3_url = SourceCoopS3.convert_repo_url_to_s3_url(repository_url)\n            if not s3_url:\n                logger.error(\"Failed to convert repository URL to S3 URL.\")\n                return False\n        else:\n            s3_url = repository_url\n\n        logger.info(f\"Using S3 URL: {s3_url}\")\n\n        # Set default output directory if not provided\n        if not output_dir:\n            # Extract repository name from S3 URL\n            _, prefix = SourceCoopS3.parse_s3_url(s3_url)\n            repo_name = prefix.strip('/').split('/')[-1] if prefix else \"download\"\n            output_dir = f\"./source-coop-{repo_name}\"\n\n        # Ensure output directory exists\n        output_path = Path(output_dir)\n        output_path.mkdir(parents=True, exist_ok=True)\n\n        logger.info(f\"Using output directory: {output_dir}\")\n\n        # Try to get objects with retries\n        objects = None\n        summary = None\n\n        for attempt in range(retries):\n            try:\n                logger.info(f\"Listing objects (attempt {attempt+1}/{retries})...\")\n                objects, summary = client.s3.list_objects_with_summary(s3_url, file_type=file_type)\n                if objects:\n                    break\n            except Exception as e:\n                logger.error(f\"Error listing objects (attempt {attempt+1}/{retries}): {str(e)}\")\n                if attempt &lt; retries - 1:\n                    # Wait before retrying (with exponential backoff)\n                    wait_time = 2 ** attempt\n                    logger.info(f\"Waiting {wait_time} seconds before retrying...\")\n                    time.sleep(wait_time)\n\n        if not objects:\n            logger.error(\"Failed to list objects after multiple attempts.\")\n            return False\n\n        logger.info(f\"Found {summary['total_files']} files ({summary['total_size_human']})\")\n\n        # Download with retries\n        for attempt in range(retries):\n            try:\n                logger.info(f\"Starting download (attempt {attempt+1}/{retries})...\")\n                successful = download_s3_objects(\n                    objects,\n                    output_dir,\n                    max_concurrent=10,\n                    multipart_count=8,\n                    quiet=False\n                )\n\n                if successful &gt; 0:\n                    logger.info(f\"Download complete. {successful} of {len(objects)} files downloaded successfully.\")\n                    return True\n                else:\n                    logger.warning(\"No files were successfully downloaded.\")\n            except Exception as e:\n                logger.error(f\"Error during download (attempt {attempt+1}/{retries}): {str(e)}\")\n\n            if attempt &lt; retries - 1:\n                # Wait before retrying (with exponential backoff)\n                wait_time = 2 ** attempt\n                logger.info(f\"Waiting {wait_time} seconds before retrying...\")\n                time.sleep(wait_time)\n\n        logger.error(\"Download failed after multiple attempts.\")\n        return False\n\n    except Exception as e:\n        logger.error(f\"Unhandled error during download process: {str(e)}\")\n        return False\n\nif __name__ == \"__main__\":\n    download_with_error_handling(\"https://source.coop/example-org/landsat-dataset\")\n</code></pre>"},{"location":"projects/download/#best-practices","title":"Best Practices","text":"<ol> <li> <p>Check Before Downloading: Use <code>summarize</code> first to understand what you're getting and how large it is.</p> </li> <li> <p>Use Multipart for Large Files: Multipart downloads significantly speed up the transfer of large files and improve reliability.</p> </li> <li> <p>Adjust Concurrency: If your connection can handle it, increase the number of concurrent downloads to speed up the process.</p> </li> <li> <p>Filter When Appropriate: Use file type filters to download only the specific types of data you need.</p> </li> <li> <p>Implement Resumable Downloads: For large repositories or unreliable connections, implement a system to track downloaded files and resume interrupted downloads.</p> </li> <li> <p>Handle Rate Limiting: Be prepared to handle rate limiting or temporary failures by implementing retries with exponential backoff.</p> </li> <li> <p>Preserve Directory Structure: The download command preserves the directory structure from the repository, which helps maintain the organization of the data.</p> </li> </ol> <p>The download functionality is designed to efficiently transfer large amounts of data from Source Coop repositories while giving you control over the process.</p>"},{"location":"projects/login/","title":"Authenticating with Source Coop","text":"<p>Authentication is required for accessing certain features of Source Coop. This guide covers how to log in and manage your authentication both from the command line and programmatically.</p>"},{"location":"projects/login/#cli-logging-in","title":"CLI: Logging In","text":"<p>To log in to Source Coop using the command-line interface:</p> <pre><code>source-coop login\n</code></pre> <p>This will prompt you for your email and password. Your credentials are securely saved as cookies in your user's config directory (<code>~/.config/source-coop/cookies.json</code> on Linux/macOS, or similar locations on other platforms) for future use.</p>"},{"location":"projects/login/#optional-parameters","title":"Optional Parameters","text":"<p>You can also provide your credentials directly as arguments:</p> <pre><code>source-coop login --email your.email@example.com --password yourpassword\n</code></pre> <p>Warning</p> <p>Providing your password directly in the command line is not recommended for security reasons, as it might be visible in your command history. The interactive prompt is more secure.</p>"},{"location":"projects/login/#cli-help","title":"CLI Help","text":"<p>For more options and help:</p> <pre><code>source-coop login --help\n</code></pre>"},{"location":"projects/login/#python-sdk-authenticating","title":"Python SDK: Authenticating","text":"<p>In your Python applications, you can authenticate programmatically using the <code>login_to_source_coop</code> function:</p> <pre><code>from source_coop.auth import login_to_source_coop\n\n# Login and save cookies (will prompt for password if not provided)\ncookies = login_to_source_coop(email=\"your.email@example.com\")\n\n# Alternatively, provide both email and password\ncookies = login_to_source_coop(\n    email=\"your.email@example.com\", \n    password=\"yourpassword\"\n)\n\n# You can also specify a custom path for saving cookies\nfrom pathlib import Path\ncustom_path = Path(\"./my-cookies.json\")\ncookies = login_to_source_coop(\n    email=\"your.email@example.com\",\n    save_path=custom_path\n)\n</code></pre>"},{"location":"projects/login/#using-cookies-with-the-client","title":"Using Cookies with the Client","text":"<p>Once you have obtained cookies through login, you can use them to create an authenticated client:</p> <pre><code>from source_coop import SourceCoopClient\n\n# Create a client with the cookies from login\nclient = SourceCoopClient(cookies)\n\n# Or let the client load cookies automatically from the default location\nclient = SourceCoopClient()  # Will use ~/.config/source-coop/cookies.json\n</code></pre>"},{"location":"projects/login/#checking-authentication-status","title":"Checking Authentication Status","text":"<p>You can check if your client is authenticated:</p> <pre><code>from source_coop import SourceCoopClient\n\nclient = SourceCoopClient()\n\nif client.is_authenticated():\n    print(\"Client is authenticated\")\nelse:\n    print(\"Client is not authenticated\")\n</code></pre>"},{"location":"projects/login/#manual-cookie-management","title":"Manual Cookie Management","text":"<p>The SDK provides functions for loading and saving cookies:</p> <pre><code>from source_coop.auth import load_cookies, save_cookies\n\n# Load cookies from the default location\ncookies = load_cookies()\n\n# Save cookies to a custom location\nfrom pathlib import Path\ncustom_path = Path(\"./my-cookies.json\")\nsave_cookies(cookies, custom_path)\n</code></pre>"},{"location":"projects/login/#how-authentication-works","title":"How Authentication Works","text":"<p>The Source Coop SDK uses cookie-based authentication. When you log in:</p> <ol> <li>The SDK sends your credentials to Source Coop's authentication service</li> <li>If successful, Source Coop returns session cookies</li> <li>These cookies are saved to your filesystem for future use</li> <li>The SDK uses these cookies for subsequent API requests</li> </ol> <p>The cookies include: - CSRF token for protection against cross-site request forgery - Session token that authenticates your requests</p>"},{"location":"projects/login/#common-issues","title":"Common Issues","text":""},{"location":"projects/login/#login-failures","title":"Login Failures","text":"<p>If you encounter login failures: - Ensure your email and password are correct - Check your internet connection - Verify that you can log in to the Source Coop website</p>"},{"location":"projects/login/#authentication-expiration","title":"Authentication Expiration","text":"<p>Cookies may expire after a certain period. If your previously working code starts failing with authentication errors, try logging in again:</p> <pre><code>source-coop login\n</code></pre>"},{"location":"projects/login/#permission-issues-with-cookie-file","title":"Permission Issues with Cookie File","text":"<p>On some systems, you might encounter permission issues with the cookies file:</p> <pre><code># Fix permissions (Linux/macOS)\nchmod 600 ~/.config/source-coop/cookies.json\n</code></pre>"},{"location":"projects/login/#best-practices","title":"Best Practices","text":"<ul> <li>For scripts that run in automated environments, consider using environment variables for credentials</li> <li>Regularly rotate your password for security</li> <li>Be careful about sharing code that includes hardcoded credentials</li> <li>Use virtual environments to isolate authentication contexts</li> </ul>"},{"location":"projects/login/#full-example","title":"Full Example","text":"<p>Here's a complete example of logging in and verifying authentication:</p> <pre><code>from source_coop import SourceCoopClient\nfrom source_coop.auth import login_to_source_coop\n\ndef main():\n    # Try to create a client with existing cookies\n    client = SourceCoopClient()\n\n    # Check if we're already authenticated\n    if client.is_authenticated():\n        print(\"Already authenticated!\")\n    else:\n        print(\"Not authenticated. Logging in...\")\n\n        # Log in and get cookies\n        cookies = login_to_source_coop()\n\n        if cookies:\n            # Create a new client with the fresh cookies\n            client = SourceCoopClient(cookies)\n            print(\"Successfully logged in!\")\n        else:\n            print(\"Login failed.\")\n            return\n\n    # Test the authentication by getting profile info\n    profile = client.api.whoami()\n    if profile:\n        print(f\"Logged in as: {profile.get('name', 'Unknown')}\")\n    else:\n        print(\"Failed to get profile information.\")\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>This example demonstrates a common pattern: try to use existing credentials first, and only prompt for login if necessary.</p>"},{"location":"projects/members/","title":"Listing Organization Members","text":"<p>The <code>members</code> command allows you to retrieve a list of members for an organization on Source Coop. This provides insights into who belongs to an organization, their roles, and membership status.</p>"},{"location":"projects/members/#cli-usage","title":"CLI Usage","text":"<p>To list members of an organization:</p> <pre><code>source-coop members ORGANIZATION_NAME\n</code></pre> <p>Replace <code>ORGANIZATION_NAME</code> with the username or account ID of the organization you want to query.</p>"},{"location":"projects/members/#example-output","title":"Example Output","text":"<pre><code>\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n\u2503 Membership ID   \u2503 Account ID   \u2503 Role     \u2503 State   \u2503 Membership Account ID   \u2503 State Changed   \u2503\n\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\n\u2502 abc123def456    \u2502 johndoe      \u2502 admin    \u2502 active  \u2502 example-org             \u2502 2024-02-15      \u2502\n\u2502 ghi789jkl012    \u2502 janedoe      \u2502 member   \u2502 active  \u2502 example-org             \u2502 2024-02-20      \u2502\n\u2502 mno345pqr678    \u2502 sarahsmith   \u2502 member   \u2502 pending \u2502 example-org             \u2502 2024-03-01      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>The table displays: - Membership ID: Unique identifier for this membership - Account ID: Username of the member - Role: Member's role in the organization (admin, member, etc.) - State: Membership status (active, pending, etc.) - Membership Account ID: The organization the membership belongs to - State Changed: When the membership state was last updated</p>"},{"location":"projects/members/#cli-help","title":"CLI Help","text":"<p>For more options and help:</p> <pre><code>source-coop members --help\n</code></pre>"},{"location":"projects/members/#python-sdk-usage","title":"Python SDK Usage","text":""},{"location":"projects/members/#basic-member-listing","title":"Basic Member Listing","text":"<pre><code>from source_coop import SourceCoopClient\n\ndef list_organization_members(organization):\n    # Create a client instance\n    client = SourceCoopClient()\n\n    # Get members data\n    members = client.api.get_members(organization)\n\n    if members:\n        print(f\"Members of {organization}:\")\n\n        # Print member information\n        for i, member in enumerate(members, 1):\n            account_id = member.get('account_id', 'N/A')\n            role = member.get('role', 'N/A')\n            state = member.get('state', 'N/A')\n\n            print(f\"{i}. {account_id} - Role: {role}, State: {state}\")\n\n        return members\n    else:\n        print(f\"Failed to get members for {organization} or no members found.\")\n        return None\n\nif __name__ == \"__main__\":\n    list_organization_members(\"example-org\")\n</code></pre>"},{"location":"projects/members/#formatted-table-display","title":"Formatted Table Display","text":"<pre><code>from source_coop import SourceCoopClient\nfrom rich.console import Console\nfrom rich.table import Table\nfrom rich import box\n\ndef display_members_table(organization):\n    client = SourceCoopClient()\n    console = Console()\n\n    # Get members data\n    members = client.api.get_members(organization)\n\n    if not members:\n        console.print(f\"[red]No members found for {organization}.[/red]\")\n        return None\n\n    # Create a rich table\n    table = Table(show_header=True, header_style=\"bold blue\", box=box.ROUNDED)\n\n    # Add columns\n    table.add_column(\"Membership ID\", style=\"cyan\")\n    table.add_column(\"Account ID\", style=\"green\")\n    table.add_column(\"Role\", style=\"yellow\")\n    table.add_column(\"State\", style=\"magenta\")\n    table.add_column(\"Membership Account ID\", style=\"blue\")\n    table.add_column(\"State Changed\", style=\"bright_cyan\")\n\n    # Add rows\n    for member in members:\n        table.add_row(\n            member.get('membership_id', 'N/A'),\n            member.get('account_id', 'N/A'),\n            member.get('role', 'N/A'),\n            member.get('state', 'N/A'),\n            member.get('membership_account_id', 'N/A'),\n            member.get('state_changed', 'N/A')\n        )\n\n    # Print the table\n    console.print(f\"\\n[bold]Members of {organization}:[/bold]\")\n    console.print(table)\n\n    return members\n\nif __name__ == \"__main__\":\n    display_members_table(\"example-org\")\n</code></pre>"},{"location":"projects/members/#filtering-members-by-role","title":"Filtering Members by Role","text":"<pre><code>from source_coop import SourceCoopClient\n\ndef get_members_by_role(organization, role):\n    client = SourceCoopClient()\n\n    # Get all members\n    members = client.api.get_members(organization)\n\n    if not members:\n        print(f\"Failed to get members for {organization}.\")\n        return []\n\n    # Filter members by role\n    filtered_members = [m for m in members if m.get('role') == role]\n\n    print(f\"Found {len(filtered_members)} members with role '{role}' in {organization}:\")\n\n    for member in filtered_members:\n        account_id = member.get('account_id', 'N/A')\n        state = member.get('state', 'N/A')\n        print(f\"- {account_id} (State: {state})\")\n\n    return filtered_members\n\nif __name__ == \"__main__\":\n    # Get all admins in the organization\n    get_members_by_role(\"example-org\", \"admin\")\n</code></pre>"},{"location":"projects/members/#finding-active-vs-pending-members","title":"Finding Active vs. Pending Members","text":"<pre><code>from source_coop import SourceCoopClient\n\ndef analyze_membership_states(organization):\n    client = SourceCoopClient()\n\n    members = client.api.get_members(organization)\n\n    if not members:\n        print(f\"Failed to get members for {organization}.\")\n        return None\n\n    # Group members by state\n    states = {}\n    for member in members:\n        state = member.get('state', 'unknown')\n        if state not in states:\n            states[state] = []\n        states[state].append(member)\n\n    # Print summary\n    print(f\"Membership states for {organization}:\")\n    for state, members_list in states.items():\n        print(f\"- {state}: {len(members_list)} members\")\n\n    # Print active members\n    if 'active' in states:\n        print(\"\\nActive members:\")\n        for member in states['active']:\n            account_id = member.get('account_id', 'N/A')\n            role = member.get('role', 'N/A')\n            print(f\"- {account_id} (Role: {role})\")\n\n    # Print pending members\n    if 'pending' in states:\n        print(\"\\nPending members:\")\n        for member in states['pending']:\n            account_id = member.get('account_id', 'N/A')\n            role = member.get('role', 'N/A')\n            print(f\"- {account_id} (Role: {role})\")\n\n    return states\n\nif __name__ == \"__main__\":\n    analyze_membership_states(\"example-org\")\n</code></pre>"},{"location":"projects/members/#getting-member-details-with-profiles","title":"Getting Member Details with Profiles","text":"<p>You can combine the members API with the profile API to get more detailed information about each member:</p> <pre><code>from source_coop import SourceCoopClient\nimport time\n\ndef get_member_profiles(organization):\n    client = SourceCoopClient()\n\n    # Get members\n    members = client.api.get_members(organization)\n\n    if not members:\n        print(f\"Failed to get members for {organization}.\")\n        return None\n\n    # Collect detailed information about each member\n    member_details = []\n\n    for member in members:\n        account_id = member.get('account_id')\n        if not account_id:\n            continue\n\n        print(f\"Getting profile for {account_id}...\")\n\n        # Get profile information for this member\n        profile = client.api.get_profile(account_id)\n\n        # Add profile information to member data\n        if profile:\n            member_with_profile = {\n                **member,\n                'profile': {\n                    'name': profile.get('name', 'N/A'),\n                    'bio': profile.get('bio', 'No bio available'),\n                    'account_type': profile.get('account_type', 'unknown')\n                }\n            }\n            member_details.append(member_with_profile)\n        else:\n            member_details.append(member)\n\n        # Add a small delay to avoid rate limiting\n        time.sleep(0.5)\n\n    # Display member details\n    print(f\"\\nDetailed member information for {organization}:\")\n\n    for member in member_details:\n        account_id = member.get('account_id', 'N/A')\n        role = member.get('role', 'N/A')\n\n        # Profile information (if available)\n        profile = member.get('profile', {})\n        name = profile.get('name', 'Unknown')\n        bio = profile.get('bio', 'No bio available')\n\n        print(f\"\\n- {name} (@{account_id})\")\n        print(f\"  Role: {role}\")\n        print(f\"  Bio: {bio}\")\n\n    return member_details\n\nif __name__ == \"__main__\":\n    get_member_profiles(\"example-org\")\n</code></pre>"},{"location":"projects/members/#finding-common-members-between-organizations","title":"Finding Common Members Between Organizations","text":"<pre><code>from source_coop import SourceCoopClient\n\ndef find_common_members(org1, org2):\n    client = SourceCoopClient()\n\n    # Get members from both organizations\n    members1 = client.api.get_members(org1)\n    members2 = client.api.get_members(org2)\n\n    if not members1 or not members2:\n        print(\"Failed to get members for one or both organizations.\")\n        return []\n\n    # Extract account IDs\n    accounts1 = {m.get('account_id') for m in members1 if m.get('account_id')}\n    accounts2 = {m.get('account_id') for m in members2 if m.get('account_id')}\n\n    # Find common accounts\n    common_accounts = accounts1.intersection(accounts2)\n\n    print(f\"Common members between {org1} and {org2}:\")\n\n    if common_accounts:\n        for account in common_accounts:\n            print(f\"- {account}\")\n    else:\n        print(\"No common members found.\")\n\n    return list(common_accounts)\n\nif __name__ == \"__main__\":\n    find_common_members(\"org-one\", \"org-two\")\n</code></pre>"},{"location":"projects/members/#error-handling","title":"Error Handling","text":"<p>When working with organization members, it's important to handle potential errors:</p> <pre><code>from source_coop import SourceCoopClient\nimport logging\n\n# Configure logging\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\n\ndef get_members_with_error_handling(organization):\n    client = SourceCoopClient()\n\n    try:\n        # Check if we're authenticated\n        if not client.is_authenticated():\n            logger.warning(\"Not authenticated. This may affect results.\")\n\n        # Get profile first to confirm it's an organization\n        profile = client.api.get_profile(organization)\n\n        if not profile:\n            logger.error(f\"No profile found for {organization}.\")\n            return None\n\n        if profile.get('account_type') != 'organization':\n            logger.error(f\"{organization} is not an organization. Account type: {profile.get('account_type')}\")\n            return None\n\n        # Get members\n        members = client.api.get_members(organization)\n\n        if not members:\n            logger.warning(f\"No members found for {organization}.\")\n            return []\n\n        logger.info(f\"Successfully retrieved {len(members)} members for {organization}.\")\n        return members\n\n    except Exception as e:\n        logger.error(f\"Error retrieving members for {organization}: {str(e)}\")\n        return None\n\nif __name__ == \"__main__\":\n    get_members_with_error_handling(\"example-org\")\n</code></pre>"},{"location":"projects/members/#best-practices","title":"Best Practices","text":"<ol> <li> <p>Check Account Type: Before querying members, verify that the account is actually an organization.</p> </li> <li> <p>Handle Rate Limits: When processing multiple organizations or members, consider adding delays between requests.</p> </li> <li> <p>Authentication: Ensure you're authenticated when requesting member information, as this may be restricted for some organizations.</p> </li> <li> <p>Caching: For applications that frequently access member information, consider implementing caching to reduce API calls.</p> </li> <li> <p>Error Recovery: Implement proper error handling to recover from API call failures.</p> </li> </ol> <p>This members API is particularly useful for understanding organizational structures and relationships between different accounts on Source Coop.</p>"},{"location":"projects/profile/","title":"Getting Profile Information","text":"<p>The <code>profile</code> command allows you to retrieve detailed information about a user or organization on Source Coop. This information includes account details, bio, and other public profile data.</p>"},{"location":"projects/profile/#cli-usage","title":"CLI Usage","text":"<p>To get profile information for a user or organization:</p> <pre><code>source-coop profile USERNAME\n</code></pre> <p>Replace <code>USERNAME</code> with the username or account ID of the user or organization you want to look up.</p>"},{"location":"projects/profile/#example-output","title":"Example Output","text":"<p>When retrieving a user profile, you'll see general account information:</p> <pre><code>User Profile: johndoe\n\n{\n  \"account_id\": \"johndoe\",\n  \"account_type\": \"user\",\n  \"name\": \"John Doe\",\n  \"bio\": \"GIS specialist working with satellite imagery\",\n  \"email\": \"john.doe@example.com\",\n  ...\n}\n</code></pre> <p>When retrieving an organization profile, you'll see organization details and members:</p> <pre><code>Organization Profile: acme-corp\n\nName: ACME Corporation\nBio: Provider of geospatial data products\n\nOrganization Members:\n\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n\u2503 Membership ID   \u2503 Account ID   \u2503 Role     \u2503 State   \u2503 Membership Account ID   \u2503 State Changed   \u2503\n\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\n\u2502 abcd1234       \u2502 johndoe      \u2502 admin    \u2502 active  \u2502 acme-corp               \u2502 2024-12-01      \u2502\n\u2502 efgh5678       \u2502 janedoe      \u2502 member   \u2502 active  \u2502 acme-corp               \u2502 2024-12-05      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"projects/profile/#cli-help","title":"CLI Help","text":"<p>For more options and help:</p> <pre><code>source-coop profile --help\n</code></pre>"},{"location":"projects/profile/#python-sdk-usage","title":"Python SDK Usage","text":""},{"location":"projects/profile/#getting-a-user-profile","title":"Getting a User Profile","text":"<pre><code>from source_coop import SourceCoopClient\nimport json\n\ndef get_user_profile(username):\n    # Create a client instance\n    client = SourceCoopClient()\n\n    # Get profile information\n    profile = client.api.get_profile(username)\n\n    if profile:\n        print(f\"Profile information for {username}:\")\n\n        # Pretty print the profile data\n        print(json.dumps(profile, indent=2))\n\n        # Get specific data fields\n        account_type = profile.get('account_type', 'unknown')\n        name = profile.get('name', 'N/A')\n        bio = profile.get('bio', 'No bio available')\n\n        print(f\"\\nAccount Type: {account_type}\")\n        print(f\"Name: {name}\")\n        print(f\"Bio: {bio}\")\n\n        return profile\n    else:\n        print(f\"Failed to get profile for {username}.\")\n        return None\n\nif __name__ == \"__main__\":\n    get_user_profile(\"johndoe\")\n</code></pre>"},{"location":"projects/profile/#getting-an-organization-profile","title":"Getting an Organization Profile","text":"<pre><code>from source_coop import SourceCoopClient\nimport json\n\ndef get_organization_profile(org_name):\n    client = SourceCoopClient()\n\n    # Get profile information\n    profile = client.api.get_profile(org_name)\n\n    if not profile:\n        print(f\"Failed to get profile for {org_name}.\")\n        return None\n\n    # Check if this is an organization\n    if profile.get('account_type') != 'organization':\n        print(f\"{org_name} is not an organization. Account type: {profile.get('account_type')}\")\n        return profile\n\n    print(f\"Organization Profile: {org_name}\")\n    print(f\"Name: {profile.get('name', 'N/A')}\")\n    print(f\"Bio: {profile.get('bio', 'No bio available')}\")\n\n    # Get organization members\n    members = client.api.get_members(org_name)\n\n    if members:\n        print(f\"\\nOrganization Members ({len(members)}):\")\n        for member in members:\n            member_id = member.get('account_id', 'N/A')\n            role = member.get('role', 'N/A')\n            state = member.get('state', 'N/A')\n            print(f\"- {member_id} ({role}, {state})\")\n    else:\n        print(\"\\nFailed to get organization members or none found.\")\n\n    return profile\n\nif __name__ == \"__main__\":\n    get_organization_profile(\"example-org\")\n</code></pre>"},{"location":"projects/profile/#checking-if-an-account-is-a-user-or-organization","title":"Checking If an Account is a User or Organization","text":"<pre><code>from source_coop import SourceCoopClient\n\ndef check_account_type(account_id):\n    client = SourceCoopClient()\n\n    profile = client.api.get_profile(account_id)\n\n    if not profile:\n        print(f\"Could not find account: {account_id}\")\n        return None\n\n    account_type = profile.get('account_type')\n\n    if account_type == 'user':\n        print(f\"{account_id} is a user account.\")\n        # Process user-specific data...\n    elif account_type == 'organization':\n        print(f\"{account_id} is an organization account.\")\n        # Process organization-specific data...\n    else:\n        print(f\"{account_id} has an unknown account type: {account_type}\")\n\n    return account_type\n\nif __name__ == \"__main__\":\n    check_account_type(\"example-account\")\n</code></pre>"},{"location":"projects/profile/#getting-profile-and-members-in-one-call","title":"Getting Profile and Members in One Call","text":"<p>For organization accounts, you may want to retrieve both the profile and members in a single function:</p> <pre><code>from source_coop import SourceCoopClient\nfrom rich.console import Console\nfrom rich.table import Table\nfrom rich import box\n\ndef get_org_with_members(org_name):\n    client = SourceCoopClient()\n    console = Console()\n\n    # Get profile information\n    profile = client.api.get_profile(org_name)\n\n    if not profile:\n        console.print(f\"[red]Failed to get profile for {org_name}.[/red]\")\n        return None\n\n    if profile.get('account_type') != 'organization':\n        console.print(f\"[yellow]{org_name} is not an organization.[/yellow]\")\n        return profile\n\n    # Display organization info\n    console.print(f\"\\n[bold green]Organization Profile:[/bold green] {org_name}\")\n    console.print(f\"[bold]Name:[/bold] {profile.get('name', 'N/A')}\")\n    console.print(f\"[bold]Bio:[/bold] {profile.get('bio', 'N/A')}\")\n\n    # Get and display members\n    members = client.api.get_members(org_name)\n\n    if not members:\n        console.print(\"[yellow]No members data available[/yellow]\")\n        return profile\n\n    # Create a rich table for members\n    table = Table(show_header=True, header_style=\"bold blue\", box=box.ROUNDED)\n\n    # Add columns\n    table.add_column(\"Membership ID\", style=\"cyan\")\n    table.add_column(\"Account ID\", style=\"green\")\n    table.add_column(\"Role\", style=\"yellow\")\n    table.add_column(\"State\", style=\"magenta\")\n    table.add_column(\"Membership Account ID\", style=\"blue\")\n    table.add_column(\"State Changed\", style=\"bright_cyan\")\n\n    # Add rows\n    for member in members:\n        table.add_row(\n            member.get('membership_id', 'N/A'),\n            member.get('account_id', 'N/A'),\n            member.get('role', 'N/A'),\n            member.get('state', 'N/A'),\n            member.get('membership_account_id', 'N/A'),\n            member.get('state_changed', 'N/A')\n        )\n\n    # Print the table\n    console.print(\"\\n[bold]Organization Members:[/bold]\")\n    console.print(table)\n\n    return {\n        'profile': profile,\n        'members': members\n    }\n\nif __name__ == \"__main__\":\n    get_org_with_members(\"example-org\")\n</code></pre>"},{"location":"projects/profile/#error-handling","title":"Error Handling","text":"<p>When working with profile data, it's important to handle potential errors:</p> <pre><code>from source_coop import SourceCoopClient\nimport logging\n\n# Configure logging\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\n\ndef get_profile_with_error_handling(account_id):\n    client = SourceCoopClient()\n\n    try:\n        # Check authentication first\n        if not client.is_authenticated():\n            logger.warning(\"Not authenticated. Some profile information may be restricted.\")\n\n        # Get profile data\n        profile = client.api.get_profile(account_id)\n\n        if not profile:\n            logger.error(f\"No profile found for {account_id}.\")\n            return None\n\n        logger.info(f\"Successfully retrieved profile for {account_id}.\")\n        return profile\n\n    except Exception as e:\n        logger.error(f\"Error retrieving profile for {account_id}: {str(e)}\")\n        return None\n\nif __name__ == \"__main__\":\n    get_profile_with_error_handling(\"example-account\")\n</code></pre>"},{"location":"projects/profile/#combining-with-repository-information","title":"Combining with Repository Information","text":"<p>You can combine profile information with repository data for a complete view of an account:</p> <pre><code>from source_coop import SourceCoopClient\nfrom source_coop.s3 import SourceCoopS3\n\ndef get_account_overview(account_id):\n    client = SourceCoopClient()\n\n    # Get profile information\n    profile = client.api.get_profile(account_id)\n\n    if not profile:\n        print(f\"Failed to get profile for {account_id}.\")\n        return None\n\n    print(f\"Account: {account_id}\")\n    print(f\"Name: {profile.get('name', 'N/A')}\")\n    print(f\"Type: {profile.get('account_type', 'N/A')}\")\n    print(f\"Bio: {profile.get('bio', 'No bio available')}\")\n\n    # Get repositories for this account\n    # Note: We search for repositories using the account ID\n    print(\"\\nSearching for repositories...\")\n    repositories = client.api.get_repositories(search=account_id)\n\n    if repositories and repositories.get('repositories'):\n        repos = repositories['repositories']\n        print(f\"\\nFound {len(repos)} repositories:\")\n\n        for repo in repos:\n            # Filter to only include repos owned by this account\n            if repo.get('account_id') == account_id:\n                title = repo.get('meta', {}).get('title', 'Untitled')\n                description = repo.get('meta', {}).get('description', 'No description')\n                published = repo.get('published', 'Unknown date')\n\n                print(f\"\\n- {title}\")\n                print(f\"  Published: {published}\")\n                print(f\"  Description: {description}\")\n\n                # Generate S3 URL for this repository\n                repo_id = repo.get('repository_id', '')\n                if repo_id:\n                    s3_url = f\"s3://{account_id}/{repo_id}\"\n                    print(f\"  S3 URL: {s3_url}\")\n    else:\n        print(\"\\nNo repositories found for this account.\")\n\n    return {\n        'profile': profile,\n        'repositories': repositories.get('repositories', []) if repositories else []\n    }\n\nif __name__ == \"__main__\":\n    get_account_overview(\"example-account\")\n</code></pre> <p>This comprehensive example shows how to combine profile information with repository data to create a complete overview of an account.</p>"},{"location":"projects/repos/","title":"Exploring Repositories","text":"<p>Source Coop hosts numerous geospatial data repositories. The <code>repos</code> command helps you discover, search, and explore these repositories programmatically.</p>"},{"location":"projects/repos/#cli-usage","title":"CLI Usage","text":""},{"location":"projects/repos/#listing-recent-repositories","title":"Listing Recent Repositories","text":"<p>To list the most recent repositories:</p> <pre><code>source-coop repos\n</code></pre> <p>This displays a table with repository details including ID, title, account, tags, publication date, and whether the repository is featured.</p>"},{"location":"projects/repos/#listing-featured-repositories","title":"Listing Featured Repositories","text":"<p>To view repositories that Source Coop has highlighted as featured:</p> <pre><code>source-coop repos --featured\n</code></pre>"},{"location":"projects/repos/#searching-for-repositories","title":"Searching for Repositories","text":"<p>You can search for repositories by keyword:</p> <pre><code>source-coop repos --search \"landsat\"\n</code></pre> <p>This searches for repositories with \"landsat\" in their metadata.</p>"},{"location":"projects/repos/#limiting-results","title":"Limiting Results","text":"<p>By default, the command returns 10 repositories. You can adjust this limit:</p> <pre><code>source-coop repos --limit 20\n</code></pre>"},{"location":"projects/repos/#pagination","title":"Pagination","text":"<p>For repositories with many results, you can use pagination:</p> <pre><code># Get the first page\nsource-coop repos --limit 10\n\n# Use the \"next\" token from the results to get the next page\nsource-coop repos --limit 10 --next \"NEXT_TOKEN_FROM_PREVIOUS_RESULTS\"\n</code></pre>"},{"location":"projects/repos/#exporting-results","title":"Exporting Results","text":"<p>You can export repository data to various formats:</p> <pre><code># Export to JSON\nsource-coop repos --export json --output ./repositories.json\n\n# Export to CSV\nsource-coop repos --export csv --output ./repositories.csv\n\n# Export to Parquet\nsource-coop repos --export parquet --output ./repositories.parquet\n</code></pre> <p>If you don't specify an output path, the file will be saved in the <code>./exports/</code> directory with a timestamped filename.</p>"},{"location":"projects/repos/#cli-help","title":"CLI Help","text":"<p>For all available options:</p> <pre><code>source-coop repos --help\n</code></pre>"},{"location":"projects/repos/#python-sdk-usage","title":"Python SDK Usage","text":""},{"location":"projects/repos/#basic-repository-listing","title":"Basic Repository Listing","text":"<pre><code>from source_coop import SourceCoopClient\n\ndef list_repositories():\n    # Create a client instance\n    client = SourceCoopClient()\n\n    # Get a list of repositories (default limit is 10)\n    repositories = client.api.get_repositories()\n\n    if repositories:\n        print(f\"Found {repositories.get('count', 0)} repositories\")\n\n        # Iterate through repositories\n        for repo in repositories.get('repositories', []):\n            title = repo.get('meta', {}).get('title', 'Untitled')\n            account = repo.get('account_id', 'Unknown')\n            published = repo.get('published', 'Unknown')\n\n            print(f\"- {title} by {account} (Published: {published})\")\n\n        # Check if there are more results\n        if 'next' in repositories:\n            print(f\"More repositories available. Next token: {repositories['next']}\")\n    else:\n        print(\"Failed to fetch repositories or none found.\")\n\nif __name__ == \"__main__\":\n    list_repositories()\n</code></pre>"},{"location":"projects/repos/#featured-repositories","title":"Featured Repositories","text":"<pre><code>from source_coop import SourceCoopClient\n\ndef list_featured_repositories():\n    client = SourceCoopClient()\n\n    # Get featured repositories\n    featured = client.api.get_repositories(featured=True)\n\n    if featured and featured.get('repositories'):\n        print(f\"Found {len(featured['repositories'])} featured repositories:\")\n\n        for repo in featured['repositories']:\n            title = repo.get('meta', {}).get('title', 'Untitled')\n            account = repo.get('account_id', 'Unknown')\n\n            print(f\"- {title} by {account}\")\n    else:\n        print(\"No featured repositories found.\")\n\nif __name__ == \"__main__\":\n    list_featured_repositories()\n</code></pre>"},{"location":"projects/repos/#searching-repositories","title":"Searching Repositories","text":"<pre><code>from source_coop import SourceCoopClient\n\ndef search_repositories(query, limit=10):\n    client = SourceCoopClient()\n\n    # Search for repositories\n    results = client.api.get_repositories(search=query, limit=limit)\n\n    if results and results.get('repositories'):\n        print(f\"Found {len(results['repositories'])} repositories matching '{query}':\")\n\n        for repo in results['repositories']:\n            title = repo.get('meta', {}).get('title', 'Untitled')\n            account = repo.get('account_id', 'Unknown')\n            tags = \", \".join(repo.get('meta', {}).get('tags', []))\n\n            print(f\"- {title} by {account}\")\n            if tags:\n                print(f\"  Tags: {tags}\")\n    else:\n        print(f\"No repositories found matching '{query}'.\")\n\nif __name__ == \"__main__\":\n    search_repositories(\"sentinel\")\n</code></pre>"},{"location":"projects/repos/#pagination-example","title":"Pagination Example","text":"<pre><code>from source_coop import SourceCoopClient\n\ndef get_all_repositories(search=None, limit_per_page=10):\n    client = SourceCoopClient()\n    all_repositories = []\n    next_token = None\n    page = 1\n\n    while True:\n        print(f\"Fetching page {page}...\")\n\n        # Get a page of repositories\n        result = client.api.get_repositories(\n            search=search,\n            limit=limit_per_page,\n            next_page=next_token\n        )\n\n        if not result or not result.get('repositories'):\n            break\n\n        # Add repositories to our collection\n        all_repositories.extend(result['repositories'])\n\n        # Check if there are more pages\n        if 'next' in result and result['next']:\n            next_token = result['next']\n            page += 1\n        else:\n            break\n\n    print(f\"Retrieved {len(all_repositories)} repositories in total.\")\n    return all_repositories\n\nif __name__ == \"__main__\":\n    # Get all repositories matching \"landsat\"\n    landsat_repos = get_all_repositories(search=\"landsat\")\n\n    # Process the results\n    for repo in landsat_repos:\n        title = repo.get('meta', {}).get('title', 'Untitled')\n        print(f\"- {title}\")\n</code></pre>"},{"location":"projects/repos/#accessing-repository-metadata","title":"Accessing Repository Metadata","text":"<pre><code>from source_coop import SourceCoopClient\nimport json\n\ndef examine_repository_metadata():\n    client = SourceCoopClient()\n\n    # Get a specific repository (by searching for a unique title)\n    results = client.api.get_repositories(search=\"landsat\", limit=1)\n\n    if not results or not results.get('repositories'):\n        print(\"No repositories found.\")\n        return\n\n    # Get the first repository from the results\n    repo = results['repositories'][0]\n\n    # Basic metadata\n    title = repo.get('meta', {}).get('title', 'Untitled')\n    account = repo.get('account_id', 'Unknown')\n    repo_id = repo.get('repository_id', 'Unknown')\n\n    print(f\"Repository: {title}\")\n    print(f\"Account: {account}\")\n    print(f\"ID: {repo_id}\")\n\n    # Publication details\n    published = repo.get('published', 'Unknown')\n    updated = repo.get('updated', 'Unknown')\n\n    print(f\"Published: {published}\")\n    print(f\"Last Updated: {updated}\")\n\n    # Tags and description\n    tags = repo.get('meta', {}).get('tags', [])\n    description = repo.get('meta', {}).get('description', 'No description')\n\n    print(f\"Tags: {', '.join(tags)}\")\n    print(f\"Description: {description}\")\n\n    # Data mode (public, etc.)\n    data_mode = repo.get('data_mode', 'Unknown')\n    featured = \"Yes\" if repo.get('featured') else \"No\"\n\n    print(f\"Data Mode: {data_mode}\")\n    print(f\"Featured: {featured}\")\n\n    # Print full repository information\n    print(\"\\nFull Repository JSON:\")\n    print(json.dumps(repo, indent=2))\n\nif __name__ == \"__main__\":\n    examine_repository_metadata()\n</code></pre>"},{"location":"projects/repos/#exporting-repositories-to-file","title":"Exporting Repositories to File","text":"<p>```python from source_coop import SourceCoopClient import json import csv import pandas as pd from datetime import datetime from pathlib import Path</p> <p>def export_repositories(export_format='json', output_path=None, search=None, limit=20):     client = SourceCoopClient()</p> <pre><code># Get repositories\nrepositories = client.api.get_repositories(search=search, limit=limit)\n\nif not repositories or not repositories.get('repositories'):\n    print(f\"No repositories found{' matching search' if search else ''}.\")\n    return None\n\n# Normalize repository data for export\nnormalized_repos = []\nfor repo in repositories['repositories']:\n    flat_repo = {\n        'repository_id': repo.get('repository_id'),\n        'account_id': repo.get('account_id'),\n        'title': repo.get('meta', {}).get('title'),\n        'description': repo.get('meta', {}).get('description'),\n        'tags': ', '.join(repo.get('meta', {}).get('tags', [])),\n        'published': repo.get('published'),\n        'updated': repo.get('updated'),\n        'data_mode': repo.get('data_mode'),\n        'featured': 'Yes' if repo.get('featured') else 'No'\n    }\n    normalized_repos.append(flat_repo)\n\n# Create default filename with timestamp if no output path is provided\nif not output_path:\n    timestamp = datetime.now().strftime(\"%Y%m%d-%H%M%S\")\n    search_suffix = f\"-{search}\" if search else \"\"\n    filename = f\"source-coop-repositories{search_suffix}-{timestamp}\"\n\n    export_dir = Path('exports')\n    export_dir.mkdir(exist_ok=True)\n\n    output_path = export_dir / filename\nelse:\n    output_path = Path(output_path)\n\n# Export based on format\ntry:\n    if export_format.lower() == 'json':\n        # Export to JSON\n        output_path = output_path.with_suffix('.json')\n        with open(output_path, 'w', encoding='utf-8') as f:\n            json.dump({\n                'repositories': normalized_repos,\n                'count': len(normalized_repos),\n                'exported_at': datetime.now().isoformat()\n            }, f, indent=2, ensure_ascii=False)\n\n    elif export_format.lower() == 'csv':\n        # Export to CSV\n        output_path = output_path.with_suffix('.csv')\n        with open(output_path, 'w', newline='', encoding='utf-8') as f:\n            if normalized_repos:\n                writer = csv.DictWriter(f, fieldnames=normalized_repos[0].keys())\n                writer.writeheader()\n                writer.writerows(normalized_repos)\n\n    elif export_format.lower() == 'parquet':\n        # Export to Parquet\n        output_path = output_path.with_suffix('.parquet')\n        df = pd.DataFrame(normalized_repos)\n        df.to_parquet(output_path, index=False)\n\n    else:\n        print(f\"Unsupported export format: {export_format}\")\n        return None\n\n    print(f\"Successfully exported {len(normalized_repos)} repositories to {output_path}\")\n    return str(output_path)\n\nexcept Exception as e:\n    print(f\"Error exporting repositories: {e}\")\n    return None\n</code></pre> <p>if name == \"main\":     # Export repositories containing \"landsat\" to CSV     export_repositories(         export_format='csv',         output_path='./</p>"},{"location":"projects/summarize/","title":"Summarizing Repository Contents","text":"<p>The <code>summarize</code> command allows you to analyze the contents of a Source Coop repository without downloading any files. This is useful for understanding what's in a repository, including file counts, sizes, types, and other metadata, before deciding whether to download files.</p>"},{"location":"projects/summarize/#cli-usage","title":"CLI Usage","text":"<p>To summarize the contents of a repository:</p> <pre><code>source-coop summarize REPOSITORY_URL\n</code></pre> <p>You can use either a web URL (https://source.coop/account/repository) or an S3 URL (s3://account/repository).</p>"},{"location":"projects/summarize/#filtering-by-file-type","title":"Filtering by File Type","text":"<p>You can filter the summary to show only files of a specific type:</p> <pre><code>source-coop summarize REPOSITORY_URL --file-type .tif\n</code></pre> <p>This will only include files with the specified extension (e.g., <code>.tif</code>, <code>.csv</code>, <code>.json</code>) in the summary.</p>"},{"location":"projects/summarize/#example-output","title":"Example Output","text":"<pre><code>Using S3 URL: s3://example-org/landsat-dataset\n\nListing objects...\n\n\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n\u2503 Repository Summary         \u2503\n\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\n\u2502 Metric     \u2502 Value         \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 Total Files\u2502 156           \u2502\n\u2502 Total Size \u2502 2.34 GB       \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n\u2503 File Types Breakdown       \u2503\n\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\n\u2502 Extension \u2502 Count \u2502 Size   \u2502 Percentage \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 .tif      \u2502 120   \u2502 2.1 GB \u2502 89.74%     \u2502\n\u2502 .xml      \u2502 24    \u2502 150 MB \u2502 6.41%      \u2502\n\u2502 .json     \u2502 12    \u2502 90 MB  \u2502 3.85%      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nObjects (showing 20 of 156)\n\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n\u2503 Last Modified    \u2503 Size    \u2503 Key                                                                            \u2503\n\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\n\u2502 2024-03-15 14:30 \u2502 25.6 MB \u2502 landsat-dataset/scene1/LC08_L2SP_202033_20240301_20240305_02_T1_SR_B5.TIF     \u2502\n\u2502 2024-03-15 14:30 \u2502 25.3 MB \u2502 landsat-dataset/scene1/LC08_L2SP_202033_20240301_20240305_02_T1_SR_B4.TIF     \u2502\n\u2502 ...              \u2502 ...     \u2502 ...                                                                            \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>The output includes: 1. A repository summary with total file count and size 2. A breakdown of file types showing count, size, and percentage 3. A list of the most recent files in the repository</p>"},{"location":"projects/summarize/#cli-help","title":"CLI Help","text":"<p>For more options and help:</p> <pre><code>source-coop summarize --help\n</code></pre>"},{"location":"projects/summarize/#python-sdk-usage","title":"Python SDK Usage","text":""},{"location":"projects/summarize/#basic-repository-summary","title":"Basic Repository Summary","text":"<pre><code>from source_coop import SourceCoopClient\nfrom source_coop.s3 import SourceCoopS3\n\ndef summarize_repository(repository_url):\n    # Create a client instance\n    client = SourceCoopClient()\n\n    # Convert repository URL to S3 URL if needed\n    if repository_url.startswith(\"http\"):\n        s3_url = SourceCoopS3.convert_repo_url_to_s3_url(repository_url)\n        if not s3_url:\n            print(\"Failed to convert repository URL to S3 URL.\")\n            return None\n    else:\n        s3_url = repository_url\n\n    print(f\"Using S3 URL: {s3_url}\")\n    print(\"Listing objects...\")\n\n    # Get objects and summary\n    objects, summary = client.s3.list_objects_with_summary(s3_url)\n\n    if not objects:\n        print(\"No objects found in the repository.\")\n        return None\n\n    # Print summary information\n    print(f\"\\nRepository Summary:\")\n    print(f\"Total Files: {summary['total_files']}\")\n    print(f\"Total Size: {summary['total_size_human']}\")\n\n    # Print file type breakdown\n    print(\"\\nFile Types Breakdown:\")\n    for ext, stats in sorted(summary['file_types'].items(), key=lambda x: x[1]['size'], reverse=True):\n        percentage = (stats['size'] / summary['total_size'] * 100) if summary['total_size'] &gt; 0 else 0\n        print(f\"- {ext}: {stats['count']} files, {SourceCoopS3.human_readable_size(stats['size'])} ({percentage:.2f}%)\")\n\n    # Print some of the objects\n    print(f\"\\nRecent Files (showing up to 5):\")\n    sorted_objects = sorted(objects, key=lambda x: x['last_modified'], reverse=True)\n    for obj in sorted_objects[:5]:\n        print(f\"- {obj['key']} ({SourceCoopS3.human_readable_size(obj['size'])})\")\n\n    return {\n        'objects': objects,\n        'summary': summary\n    }\n\nif __name__ == \"__main__\":\n    summarize_repository(\"https://source.coop/example-org/landsat-dataset\")\n</code></pre>"},{"location":"projects/summarize/#filtering-by-file-type_1","title":"Filtering by File Type","text":"<pre><code>from source_coop import SourceCoopClient\nfrom source_coop.s3 import SourceCoopS3\n\ndef summarize_by_file_type(repository_url, file_type):\n    client = SourceCoopClient()\n\n    # Convert repository URL to S3 URL if needed\n    if repository_url.startswith(\"http\"):\n        s3_url = SourceCoopS3.convert_repo_url_to_s3_url(repository_url)\n        if not s3_url:\n            print(\"Failed to convert repository URL to S3 URL.\")\n            return None\n    else:\n        s3_url = repository_url\n\n    print(f\"Using S3 URL: {s3_url}\")\n    print(f\"Filtering for files with extension: {file_type}\")\n\n    # Get objects and summary with file type filter\n    objects, summary = client.s3.list_objects_with_summary(s3_url, file_type=file_type)\n\n    if not objects:\n        print(f\"No {file_type} files found in the repository.\")\n        return None\n\n    # Print summary information\n    print(f\"\\nRepository Summary (filtered to {file_type} files):\")\n    print(f\"Total Files: {summary['total_files']}\")\n    print(f\"Total Size: {summary['total_size_human']}\")\n\n    # Print some of the objects\n    print(f\"\\nRecent {file_type} Files (showing up to 10):\")\n    sorted_objects = sorted(objects, key=lambda x: x['last_modified'], reverse=True)\n    for obj in sorted_objects[:10]:\n        print(f\"- {obj['key']} ({SourceCoopS3.human_readable_size(obj['size'])})\")\n\n    return {\n        'objects': objects,\n        'summary': summary\n    }\n\nif __name__ == \"__main__\":\n    summarize_by_file_type(\"https://source.coop/example-org/landsat-dataset\", \".tif\")\n</code></pre>"},{"location":"projects/summarize/#using-rich-for-formatted-output","title":"Using Rich for Formatted Output","text":"<p>For more visually appealing output, you can use the <code>rich</code> library to format tables and text:</p> <pre><code>from source_coop import SourceCoopClient\nfrom source_coop.s3 import SourceCoopS3\nfrom rich.console import Console\nfrom rich.table import Table\nfrom rich import box\n\ndef summarize_with_rich(repository_url, file_type=None):\n    client = SourceCoopClient()\n    console = Console()\n\n    # Convert repository URL to S3 URL if needed\n    if repository_url.startswith(\"http\"):\n        s3_url = SourceCoopS3.convert_repo_url_to_s3_url(repository_url)\n        if not s3_url:\n            console.print(\"[red]Failed to convert repository URL to S3 URL.[/red]\")\n            return None\n    else:\n        s3_url = repository_url\n\n    console.print(f\"[bold]Using S3 URL:[/bold] {s3_url}\")\n\n    # Filter message if applicable\n    if file_type:\n        console.print(f\"[bold]Filtering for files with extension:[/bold] {file_type}\")\n\n    console.print(\"[bold]Listing objects...[/bold]\")\n\n    # Get objects and summary\n    objects, summary = client.s3.list_objects_with_summary(s3_url, file_type=file_type)\n\n    if not objects:\n        console.print(\"[yellow]No objects found in the repository.[/yellow]\")\n        return None\n\n    # Create summary table\n    main_table = Table(\n        title=\"Repository Summary\",\n        show_header=True,\n        header_style=\"bold magenta\",\n        box=box.ROUNDED\n    )\n\n    main_table.add_column(\"Metric\", style=\"cyan\")\n    main_table.add_column(\"Value\", style=\"green\")\n\n    main_table.add_row(\"Total Files\", str(summary['total_files']))\n    main_table.add_row(\"Total Size\", summary['total_size_human'])\n\n    console.print(main_table)\n\n    # Create file types table\n    if summary['file_types']:\n        types_table = Table(\n            title=\"File Types Breakdown\",\n            show_header=True,\n            header_style=\"bold blue\",\n            box=box.ROUNDED\n        )\n\n        types_table.add_column(\"Extension\", style=\"cyan\")\n        types_table.add_column(\"Count\", style=\"green\", justify=\"right\")\n        types_table.add_column(\"Size\", style=\"yellow\", justify=\"right\")\n        types_table.add_column(\"Percentage\", style=\"magenta\", justify=\"right\")\n\n        # Sort file types by size (descending)\n        sorted_types = sorted(\n            summary['file_types'].items(),\n            key=lambda x: x[1]['size'],\n            reverse=True\n        )\n\n        for ext, stats in sorted_types:\n            percentage = (stats['size'] / summary['total_size'] * 100) if summary['total_size'] &gt; 0 else 0\n            types_table.add_row(\n                ext,\n                str(stats['count']),\n                SourceCoopS3.human_readable_size(stats['size']),\n                f\"{percentage:.2f}%\"\n            )\n\n        console.print(types_table)\n\n    # Create objects table (limited to 20 items)\n    objects_limit = 20\n    objects_table = Table(\n        title=f\"Objects (showing {min(objects_limit, len(objects))} of {len(objects)})\",\n        show_header=True,\n        header_style=\"bold blue\",\n        box=box.ROUNDED\n    )\n\n    objects_table.add_column(\"Last Modified\", style=\"cyan\", no_wrap=True)\n    objects_table.add_column(\"Size\", style=\"green\", justify=\"right\")\n    objects_table.add_column(\"Key\", style=\"yellow\", overflow=\"fold\")\n\n    # Sort by last modified (newest first)\n    sorted_objects = sorted(\n        objects,\n        key=lambda x: x['last_modified'],\n        reverse=True\n    )\n\n    # Add rows (limited to specified number)\n    for obj in sorted_objects[:objects_limit]:\n        objects_table.add_row(\n            obj['last_modified'],\n            SourceCoopS3.human_readable_size(obj['size']),\n            obj['key']\n        )\n\n    console.print(objects_table)\n\n    return {\n        'objects': objects,\n        'summary': summary\n    }\n\nif __name__ == \"__main__\":\n    summarize_with_rich(\"https://source.coop/example-org/landsat-dataset\")\n</code></pre>"},{"location":"projects/summarize/#analyzing-repository-structure","title":"Analyzing Repository Structure","text":"<p>You can use the summarize functionality to analyze the directory structure of a repository:</p> <pre><code>from source_coop import SourceCoopClient\nfrom source_coop.s3 import SourceCoopS3\nfrom collections import defaultdict\nimport os\n\ndef analyze_repository_structure(repository_url):\n    client = SourceCoopClient()\n\n    # Convert repository URL to S3 URL if needed\n    if repository_url.startswith(\"http\"):\n        s3_url = SourceCoopS3.convert_repo_url_to_s3_url(repository_url)\n        if not s3_url:\n            print(\"Failed to convert repository URL to S3 URL.\")\n            return None\n    else:\n        s3_url = repository_url\n\n    print(f\"Using S3 URL: {s3_url}\")\n    print(\"Analyzing repository structure...\")\n\n    # Get objects\n    objects, _ = client.s3.list_objects_with_summary(s3_url)\n\n    if not objects:\n        print(\"No objects found in the repository.\")\n        return None\n\n    # Analyze directory structure\n    directories = defaultdict(int)\n\n    for obj in objects:\n        key = obj['key']\n\n        # Skip the object itself and process its parent directories\n        path_parts = key.split('/')\n\n        # Process each directory level\n        for i in range(len(path_parts)):\n            if i &gt; 0:  # Skip the file itself (last part)\n                dir_path = '/'.join(path_parts[:i])\n                if dir_path:  # Skip empty strings\n                    directories[dir_path] += 1\n\n    # Print directory structure (sorted by count)\n    print(\"\\nDirectory Structure:\")\n    sorted_dirs = sorted(directories.items(), key=lambda x: x[1], reverse=True)\n\n    for dir_path, count in sorted_dirs[:20]:  # Show top 20 directories\n        depth = dir_path.count('/') + 1\n        indent = '  ' * depth\n        print(f\"{indent}- {os.path.basename(dir_path)}/ ({count} files)\")\n\n    if len(sorted_dirs) &gt; 20:\n        print(f\"... and {len(sorted_dirs) - 20} more directories\")\n\n    # Count files at the root level\n    root_files = sum(1 for obj in objects if '/' not in obj['key'])\n    if root_files &gt; 0:\n        print(f\"\\nFiles at root level: {root_files}\")\n\n    return {\n        'objects': objects,\n        'directories': dict(directories)\n    }\n\nif __name__ == \"__main__\":\n    analyze_repository_structure(\"https://source.coop/example-org/landsat-dataset\")\n</code></pre>"},{"location":"projects/summarize/#finding-largest-files","title":"Finding Largest Files","text":"<p>You can use the summary functionality to identify the largest files in a repository:</p> <pre><code>from source_coop import SourceCoopClient\nfrom source_coop.s3 import SourceCoopS3\n\ndef find_largest_files(repository_url, limit=10):\n    client = SourceCoopClient()\n\n    # Convert repository URL to S3 URL if needed\n    if repository_url.startswith(\"http\"):\n        s3_url = SourceCoopS3.convert_repo_url_to_s3_url(repository_url)\n        if not s3_url:\n            print(\"Failed to convert repository URL to S3 URL.\")\n            return None\n    else:\n        s3_url = repository_url\n\n    print(f\"Finding the {limit} largest files in {s3_url}...\")\n\n    # Get objects\n    objects, _ = client.s3.list_objects_with_summary(s3_url)\n\n    if not objects:\n        print(\"No objects found in the repository.\")\n        return None\n\n    # Sort by size (largest first)\n    sorted_objects = sorted(objects, key=lambda x: x['size'], reverse=True)\n\n    # Show largest files\n    print(f\"\\nLargest files in the repository:\")\n    for i, obj in enumerate(sorted_objects[:limit], 1):\n        print(f\"{i}. {obj['key']} ({SourceCoopS3.human_readable_size(obj['size'])})\")\n\n    return sorted_objects[:limit]\n\nif __name__ == \"__main__\":\n    find_largest_files(\"https://source.coop/example-org/landsat-dataset\")\n</code></pre>"},{"location":"projects/summarize/#error-handling","title":"Error Handling","text":"<p>When working with the summary functionality, it's important to handle potential errors:</p> <pre><code>from source_coop import SourceCoopClient\nfrom source_coop.s3 import SourceCoopS3\nimport logging\n\n# Configure logging\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\n\ndef summarize_with_error_handling(repository_url, file_type=None):\n    client = SourceCoopClient()\n\n    try:\n        # Convert repository URL to S3 URL if needed\n        if repository_url.startswith(\"http\"):\n            s3_url = SourceCoopS3.convert_repo_url_to_s3_url(repository_url)\n            if not s3_url:\n                logger.error(\"Failed to convert repository URL to S3 URL.\")\n                return None\n        else:\n            s3_url = repository_url\n\n        logger.info(f\"Using S3 URL: {s3_url}\")\n\n        # Get objects and summary\n        objects, summary = client.s3.list_objects_with_summary(s3_url, file_type=file_type)\n\n        if not objects:\n            logger.warning(f\"No objects found in the repository{' matching filter' if file_type else ''}.\")\n            return None\n\n        logger.info(f\"Found {summary['total_files']} files ({summary['total_size_human']}).\")\n        return {\n            'objects': objects,\n            'summary': summary\n        }\n\n    except Exception as e:\n        logger.error(f\"Error summarizing repository {repository_url}: {str(e)}\")\n        return None\n\nif __name__ == \"__main__\":\n    summarize_with_error_handling(\"https://source.coop/example-org/landsat-dataset\")\n</code></pre>"},{"location":"projects/summarize/#best-practices","title":"Best Practices","text":"<ol> <li> <p>Check Before Downloading: Always use <code>summarize</code> before <code>download</code> to understand what you're getting and how large it is.</p> </li> <li> <p>Filter When Needed: Use the file type filter to focus on specific data types when repositories contain mixed content.</p> </li> <li> <p>Handle Empty Results: Be prepared for empty results, especially when using filters.</p> </li> <li> <p>URL Flexibility: The API accepts both web URLs and S3 URLs, so use whichever is more convenient.</p> </li> <li> <p>Structure Analysis: For large repositories, analyze the directory structure to understand the organization.</p> </li> </ol> <p>The summarize functionality is a powerful tool for exploring repository contents without downloading any data, helping you make informed decisions about which datasets to download and use in your projects.</p>"},{"location":"projects/whoami/","title":"Checking Authentication Status","text":"<p>The <code>whoami</code> command allows you to check your current authentication status and display information about the logged-in user. This is useful for verifying that you're properly authenticated before performing operations that require authentication.</p>"},{"location":"projects/whoami/#cli-usage","title":"CLI Usage","text":"<p>To check who you're currently logged in as:</p> <pre><code>source-coop whoami\n</code></pre>"},{"location":"projects/whoami/#example-output","title":"Example Output","text":"<p>When authenticated:</p> <pre><code>Logged in as: John Doe\n</code></pre> <p>When not authenticated:</p> <pre><code>Not logged in. Use 'login' command first.\n</code></pre>"},{"location":"projects/whoami/#cli-help","title":"CLI Help","text":"<p>For help with the command:</p> <pre><code>source-coop whoami --help\n</code></pre>"},{"location":"projects/whoami/#python-sdk-usage","title":"Python SDK Usage","text":"<p>In your Python scripts, you can check authentication status and retrieve profile information using the SDK:</p> <pre><code>from source_coop import SourceCoopClient\n\ndef check_authentication():\n    # Create a client instance\n    client = SourceCoopClient()\n\n    # Check if the client has valid authentication cookies\n    if not client.is_authenticated():\n        print(\"Not authenticated. Please run 'source-coop login' first.\")\n        return None\n\n    # Get the profile information for the authenticated user\n    profile = client.api.whoami()\n\n    if profile:\n        print(f\"Logged in as: {profile.get('name', 'Unknown')}\")\n        return profile\n    else:\n        print(\"Failed to get user profile. You may need to log in again.\")\n        return None\n\nif __name__ == \"__main__\":\n    check_authentication()\n</code></pre>"},{"location":"projects/whoami/#checking-authentication-without-printing","title":"Checking Authentication Without Printing","text":"<p>If you just want to check authentication status within your code without printing messages:</p> <pre><code>from source_coop import SourceCoopClient\n\ndef is_authenticated():\n    client = SourceCoopClient()\n\n    # First check if we have authentication cookies\n    if not client.is_authenticated():\n        return False\n\n    # Then verify the cookies are still valid by making an API call\n    profile = client.api.whoami()\n    return profile is not None\n\nif __name__ == \"__main__\":\n    if is_authenticated():\n        # Proceed with authenticated operations\n        print(\"Authentication is valid\")\n    else:\n        # Handle unauthenticated state\n        print(\"Authentication is not valid\")\n</code></pre>"},{"location":"projects/whoami/#getting-profile-details","title":"Getting Profile Details","text":"<p>The profile information returned by <code>whoami()</code> contains details about the authenticated user:</p> <pre><code>from source_coop import SourceCoopClient\nimport json\n\ndef get_profile_details():\n    client = SourceCoopClient()\n\n    if not client.is_authenticated():\n        print(\"Not authenticated.\")\n        return None\n\n    profile = client.api.whoami()\n\n    if profile:\n        # Print entire profile as formatted JSON\n        print(json.dumps(profile, indent=2))\n\n        # Access specific fields\n        print(f\"Name: {profile.get('name')}\")\n        print(f\"Email: {profile.get('email')}\")\n        # Other fields depend on the Source Coop API response\n\n        return profile\n    else:\n        print(\"Failed to get profile information.\")\n        return None\n\nif __name__ == \"__main__\":\n    get_profile_details()\n</code></pre>"},{"location":"projects/whoami/#integrating-with-other-operations","title":"Integrating with Other Operations","text":"<p>The <code>whoami</code> functionality is often used to check authentication before performing other operations:</p> <pre><code>from source_coop import SourceCoopClient\n\ndef main():\n    client = SourceCoopClient()\n\n    # Check authentication\n    if not client.is_authenticated():\n        print(\"Not authenticated. Please run 'source-coop login' first.\")\n        return\n\n    profile = client.api.whoami()\n    if not profile:\n        print(\"Failed to get user profile. You may need to log in again.\")\n        return\n\n    print(f\"Logged in as: {profile.get('name', 'Unknown')}\")\n\n    # Continue with other operations now that we know we're authenticated\n    print(\"Listing repositories...\")\n    repos = client.api.get_repositories(limit=5)\n\n    if repos:\n        print(f\"Found {repos.get('count', 0)} repositories\")\n        # Process repositories...\n    else:\n        print(\"Failed to list repositories.\")\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"projects/whoami/#error-handling","title":"Error Handling","text":"<p>When working with authentication checks, it's important to handle potential errors:</p> <pre><code>from source_coop import SourceCoopClient\nimport logging\n\n# Configure logging\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\n\ndef check_auth_with_error_handling():\n    try:\n        client = SourceCoopClient()\n\n        if not client.is_authenticated():\n            logger.warning(\"Not authenticated. Please log in first.\")\n            return False\n\n        profile = client.api.whoami()\n\n        if not profile:\n            logger.warning(\"Authentication may have expired. Please log in again.\")\n            return False\n\n        logger.info(f\"Authenticated as: {profile.get('name', 'Unknown')}\")\n        return True\n\n    except Exception as e:\n        logger.error(f\"Error checking authentication: {str(e)}\")\n        return False\n\nif __name__ == \"__main__\":\n    check_auth_with_error_handling()\n</code></pre>"},{"location":"projects/whoami/#best-practices","title":"Best Practices","text":"<ol> <li> <p>Check Authentication Early: Verify authentication at the beginning of your scripts to fail fast if there's an issue.</p> </li> <li> <p>Handle Expired Sessions: Remember that sessions can expire, so check authentication before important operations even if you've already checked it earlier.</p> </li> <li> <p>Clear Error Messages: Provide clear guidance to users when authentication fails, such as suggesting to run the login command.</p> </li> <li> <p>Automatic Login: For better user experience in interactive scripts, you can automatically prompt for login if authentication fails:</p> </li> </ol> <pre><code>from source_coop import SourceCoopClient\nfrom source_coop.auth import login_to_source_coop\n\ndef ensure_authenticated():\n    client = SourceCoopClient()\n\n    # Try with existing cookies first\n    if client.is_authenticated() and client.api.whoami():\n        return client\n\n    print(\"Authentication required. Please log in.\")\n\n    # Prompt for login\n    cookies = login_to_source_coop()\n\n    if cookies:\n        # Create a new client with fresh cookies\n        return SourceCoopClient(cookies)\n    else:\n        print(\"Login failed.\")\n        return None\n\nif __name__ == \"__main__\":\n    client = ensure_authenticated()\n    if client:\n        print(\"Successfully authenticated!\")\n        # Continue with authenticated operations...\n    else:\n        print(\"Could not authenticate.\")\n</code></pre> <p>This pattern provides a smooth user experience in interactive environments by automatically handling login when needed.</p>"}]}